'\" t
.\" Automatically generated by Pandoc 3.6
.\"
.TH "TP\-NOTE" "1" "2025\-09\-12" "Version 1.25.15" "Tp\-Note documentation"
.SH NAME
Tp\-Note: Markup enhanced granular note\-taking
.PP
Save and edit your clipboard content as a note file.
.SH SYNOPSIS
.IP
.EX
tpnote [\-a ] [\-b] [\-c <FILE>] [\-C <FILE>] [\-d <LEVEL>] [\-e] 
       [\-l <LANG>] [\-p <NUM>] [\-n] [\-t] [\-u] [\-v] [\-V] 
       [\-x <DIR>|\[aq]\[aq]|\[aq]\-\[aq]]
       [<DIR>|<FILE>]
.EE
.SH DESCRIPTION
Tp\-Note is a note\-taking tool and a template system, that synchronizes
the note\[cq]s metadata with its filename.
Tp\-Note analyses its environment and the clipboard content and stores
the result in variables.
New notes are created by filling these variables in predefined and
customizable \f[I]Tera\f[R]\-templates.
In case the first positional parameter `\f[CR]<FILE>\f[R]' points to an
existing Tp\-Note file, the note\[cq]s metadata is parsed and, if
necessary, its filename is adjusted.
For all other file types, Tp\-Note creates a new note in the same
directory annotating the file.
If the positional parameter `\f[CR]<DIR>\f[R]' points to an existing
directory (or, when omitted, the current working directory), a new note
is created in that directory.
After creation, Tp\-Note launches the systems file editor.
Although the configurable default templates are written for Markdown,
Tp\-Note is not tied to any specific markup language.
However, Tp\-Note comes with an optional viewer feature, that currently
renders only Markdown, ReStructuredText and HTML input.
In addition, there is some limited support for Asciidoc and WikiText.
Finally, the note\[cq]s rendition is live updated and displayed in the
user\[cq]s web browser.
.PP
After the user finished editing, Tp\-Note analyses potential changes in
the notes metadata and renames, if necessary, the file, so that its
metadata and filename are in sync again.
Finally, the resulting path is printed to `\f[CR]stdout\f[R]', log and
error messages are dumped to `\f[CR]stderr\f[R]'.
.PP
This document is Tp\-Note\[cq]s technical reference.
More information can be found in \c
.UR https://blog.getreu.net/projects/tp-note/tpnote--manual.html
Tp\-Note\[cq]s user manual
.UE \c
\ and at \c
.UR https://blog.getreu.net/projects/tp-note/
Tp\-Note\[cq]s project page
.UE \c
\&.
.SH CREATING NOTE FILES
Tp\-Note operates in 5 different modes, depending on its command line
arguments and the clipboard state.
Each mode is associated with one content template and one filename
template.
.SS Create a new note with empty clipboard
In case the clipboard is empty while starting, the new note is created
with the templates: `\f[CR]tmpl.from_dir_content\f[R]' and
`\f[CR]tmpl.from_dir_filename\f[R]'.
By default, the new note\[cq]s title is the parent\[cq]s directory name.
The newly created file is then opened with an external text editor,
allowing it to change the proposed title and add other content.
When the text editor closes, Tp\-Note synchronizes the note\[cq]s
metadata and its filename.
This operation is performed with the `\f[CR]tmpl.sync_filename\f[R]'
template.
.PP
Use case: the clipboard is empty and `\f[CR]<path>\f[R]' is a directory
(or empty):
.IP
.EX
tpnote \[dq]./03\-Favorite Readings/\[dq]
.EE
.PP
or
.IP
.EX
cd \[dq]./03\-Favorite Readings\[dq]
tpnote
.EE
.PP
creates the document:
.IP
.EX
\&./03\-Favorite Readings/20211031\-Favorite Readings\-\-Note.md
.EE
.PP
with the content:
.IP
.EX
\-\-\-
title\f[B]:\f[R]      Favorite Readings
subtitle\f[B]:\f[R]   Note
author\f[B]:\f[R]     Getreu
date\f[B]:\f[R]       2021\-10\-31
lang\f[B]:\f[R]       en\-GB
\-\-\-
.EE
.SS Create a new note based on clipboard data
When `\f[CR]<path>\f[R]' is a directory and the clipboard is not empty,
the clipboard\[cq]s content is stored in the variables
`\f[CR]{{ txt_clipboard.body }}\f[R]' and
`\f[CR]{{ html_clipboard.body }}\f[R]'.
The latter contains the HTML rich text version of the clipboard content.
In addition, if the content contains a hyperlink, the first
hyperlink\[cq]s name can be accessed with
`\f[CR]{{ txt_clipboard.body | link_text }}\f[R]', its URL with
`\f[CR]{{ txt_clipboard.body | link_dest }}\f[R]' and its title with
`\f[CR]{{ txt_clipboard.body | link_title }}\f[R]'.
The new note is then created with the `\f[CR]tmpl.from_dir_content\f[R]'
and the `\f[CR]tmpl.from_dir_filename\f[R]' templates.
Finally, the newly created note file is opened again with some external
text editor.
When the user closes the text editor, Tp\-Note synchronizes the
note\[cq]s metadata and its filename with the template
`\f[CR]tmpl.sync_filename\f[R]'.
.PP
Note: this operation mode also empties the clipboard (configurable
feature).
.PP
\f[B]HTML to Markdown conversion\f[R]
.PP
In case the clipboard stream contains HTML, the internal filter
.IP
.EX
{{ html_clipboard.body
   | html_to_markup(extension=extension_default, default=txt_clipboard.body) }}
.EE
.PP
converts the stream into Markdown before being processed.
If the conversion fails or results in an empty string, the fallback
value is `\f[CR]{{ txt_clipboard.body }}\f[R]'
.PP
\f[B]Clipboard simulation\f[R]
.PP
When no mouse and clipboard is available, the clipboard feature can be
simulated by feeding the clipboard data into \f[CR]stdin\f[R].
.IP
.EX
echo \[dq][The Rust Book](<https://doc.rust\-lang.org/book/>)\[dq] \f[B]|\f[R] tpnote
.EE
.PP
Tp\-Note behaves here as if the clipboard contained the string:
\[lq]\f[CR][The Rust Book](<https://doc.rust\-lang.org/book/>)\f[R]\[rq].
.PP
When you pipe HTML into Tp\-Note, make sure that the stream starts with
either `\f[CR]<!DOCTYPE html\f[R]' or `\f[CR]<html\f[R]', e.g.:
.IP
.EX
echo \[aq]<!DOCTYPE html><h1>Hello World</h1>\[aq]\f[B]|\f[R] tpnote
.EE
.SS The clipboard contains some text
Use case: While launching Tp\-Note the clipboard contains the string:
\[lq]\f[CR]Who Moved My Cheese?\[rs]n\[rs]nChapter 2\f[R]\[rq] and
`\f[CR]<path>\f[R]' is a directory.
.IP
.EX
tpnote \[dq]./03\-Favorite Readings/\[dq]
.EE
.PP
Or:
.IP
.EX
cd \[dq]./03\-Favorite Readings/\[dq]
tpnote
.EE
.PP
This creates the document:
.IP
.EX
\&./03\-Favorite Readings/20211031\-Who Moved My Cheese\-\-Note.md
.EE
.PP
with the content:
.IP
.EX
\-\-\-
title\f[B]:\f[R]      Who Moved My Cheese
subtitle\f[B]:\f[R]   Note
author\f[B]:\f[R]     Getreu
date\f[B]:\f[R]       2021\-10\-31
lang\f[B]:\f[R]       en\-GB
\-\-\-

Who Moved My Cheese?

Chapter 2
.EE
.PP
We see from the above example, how the
`\f[CR]tmpl.from_dir_content\f[R]' content template extracts the first
line of the clipboards content and inserts it into the header\[cq]s
`\f[CR]title:\f[R]' field.
Then, it copies the entire clipboard content into the body of the
document.
However, if desired or necessary, it is possible to modify all templates
in Tp\-Note\[cq]s configuration file.
Note, that not only the note\[cq]s content is created with a template,
but also its filename: The `\f[CR]tmpl.from_dir_filename\f[R]' filename
template concatenates the current date, the note\[cq]s title and
subtitle.
.SS The clipboard contains a heading
Use case: open a web page in your web browser and select some text with
it\[cq]s heading.
Then copy the content into your (HTML) clipboard:
.IP
.EX
<\f[B]h1\f[R]>Cinderella</\f[B]h1\f[R]>
by the Brothers Grimm
.EE
.PP
Launch Tp\-Note:
.IP
.EX
mkdir \[aq]Fary tales\[aq]
tpnote \[aq]./Fary tales\[aq]
.EE
.PP
Tp\-Note\[cq]s templates `\f[CR]tmpl.from_dir_content\f[R]' and
`\f[CR]tmpl.from_dir_filename\f[R]' create the following document:
.IP
.EX
\&./Fary tales/20250104\-Cinderella\-\-Notes.md
.EE
.IP
.EX
\-\-\-
title\f[B]:\f[R]        Cinderella
subtitle\f[B]:\f[R]     Note
author\f[B]:\f[R]       Getreu
date\f[B]:\f[R]         2025\-01\-04
lang\f[B]:\f[R]         de\-DE
\-\-\-

\f[I]# Cinderella\f[R]

by the Brothers Grimm
.EE
.PP
Tp\-Note searches for the first heading tag `\f[CR]<h1>\f[R]',
`\f[CR]<h2>\f[R]', `\f[CR]<h3>\f[R]' etc.
in the HTML clipboard and uses the finding as title for the new Tp\-Note
document.
.PP
NB: you can achieve the same result by piping the clipboard content into
Tp\-Note:
.IP
.EX
mkdir \[aq]Fary tales\[aq]
echo \[aq]<!DOCTYPE html><h1>Cinderella</h1>by the Brothers Grimm\[aq]\[rs]
   \f[B]|\f[R] tpnote \[aq]./Fary tales\[aq]
.EE
.SS The clipboard contains a hyperlink
Use case: `\f[CR]<path>\f[R]' is a directory, the clipboard is not empty
and contains the string:
`\f[CR]I recommend:\[rs]n[The Rust Book](https://doc.rust\-lang.org/book/)\f[R]'.
.IP
.EX
tpnote \[aq]./doc/Lecture 1\[aq]
.EE
.PP
Tp\-Note\[cq]s templates `\f[CR]tmpl.from_dir_content\f[R]' and
`\f[CR]tmpl.from_dir_filename\f[R]' create the following document:
.IP
.EX
\&./doc/Lecture 1/20211031\-The Rust Book\-\-Notes.md
.EE
.IP
.EX
\-\-\-
title\f[B]:\f[R]      The Rust Book
subtitle\f[B]:\f[R]   URL
author\f[B]:\f[R]     Getreu
date\f[B]:\f[R]       2021\-10\-31
lang\f[B]:\f[R]       en\-GB
\-\-\-

I recommend\f[B]:\f[R]
\f[B][\f[R]The Rust Book\f[B]]\f[R](<https://doc.rust\-lang.org/book/>)
.EE
.PP
When analysing the clipboard\[cq]s content, Tp\-Note searches for
hyperlinks in Markdown, ReStructuredText, Asciidoc and HTML format.
When successful, the content template uses the link text of the first
hyperlink found as document title.
.SS The clipboard contains a YAML header
Use case: `\f[CR]<path>\f[R]' is a directory, the clipboard is not empty
and contains the string:
`\f[CR]\-\-\-\[rs]ntitle: Todo\[rs]nfile_ext: mdtxt\[rs]n\-\-\-\[rs]nnothing\f[R]'.
.IP
.EX
tpnote
.EE
.PP
This creates the note: `\f[CR]20230915\-Todo.mdtxt\f[R]' with the
following content:
.IP
.EX
\-\-\-
title\f[B]:\f[R]      Todo
subtitle\f[B]:\f[R]   Note
author\f[B]:\f[R]     Getreu
date\f[B]:\f[R]       2023\-09\-15
lang\f[B]:\f[R]       fr\-FR

file_ext\f[B]:\f[R]   mdtxt
\-\-\-

nothing
.EE
.PP
Technically, the creation of the new note is performed using the YAML
header variables: `\f[CR]{{ fm.fm_title }}\f[R]',
`\f[CR]{{ fm.fm_subtitle }}\f[R]', `\f[CR]{{ fm.fm_author }}\f[R]',
`\f[CR]{{ fm.fm_date }}\f[R]', `\f[CR]{{ fm.fm_lang }}\f[R]',
`\f[CR]{{ fm.fm_sort_tag }}\f[R]' and `\f[CR]{{ fm.fm_file_ext }}\f[R]'
which are evaluated with the `\f[CR]tmpl.from_dir_filename\f[R]'
templates.
.PP
Note, that the same result can also be achieved without clipboard input
by typing in a terminal:
.IP
.EX
echo \-e \[dq]\-\-\-\[rs]ntitle: Todo\[rs]nfile_ext: mdtxt\[rs]n\-\-\-\[rs]n\[rs]nnothing\[dq] \f[B]|\f[R] tpnote
.EE
.PP
Furthermore, this operation mode is very handy with pipes in general, as
shows the following example: it downloads some webpage, converts it to
Markdown and copies the result into a Tp\-Note file.
The procedure preserves the webpage\[cq]s title in the note\[cq]s title:
.IP
.EX
curl \[aq]https://blog.getreu.net\[aq] \[rs]
\f[B]|\f[R] pandoc \-\-standalone \-f html \-t markdown_strict+yaml_metadata_block \[rs]
\f[B]|\f[R] tpnote
.EE
.PP
creates the note file
`\f[CR]20230919\-Jens Getreu\[aq]s blog\-\-Note.md\f[R]' with the
webpage\[cq]s content converted to Markdown:
.IP
.EX
\-\-\-
title\f[B]:\f[R]      Jens Getreu\[aq]s blog
subtitle\f[B]:\f[R]   Note
author\f[B]:\f[R]     Getreu
date\f[B]:\f[R]       2023\-09\-15
lang\f[B]:\f[R]       en

viewport\f[B]:\f[R]   width=device\-width, initial\-scale=1.0, maximum\-scale=1
\-\-\-

<a href=\[dq]/\[dq] class=\[dq]logo\[dq]>Jens Getreu\[aq]s blog</a>

\f[B]\-\f[R]   \f[B][\f[R]Home\f[B]]\f[R](https://blog.getreu.net)
\f[B]\-\f[R]   \f[B][\f[R]Categories\f[B]]\f[R](https://blog.getreu.net/categories)
.EE
.SS Create a new note annotating some non Tp\-Note file
When `\f[CR]<path>\f[R]' points to an existing file, whose file
extension is other than `\f[CR].md\f[R]', a new note is created with a
similar filename and a reference to the original file is copied into the
new note\[cq]s body.
If the clipboard contains some text, it is appended there also.
The logic of this is implemented in the templates:
`\f[CR]tmpl.annotate_file_content\f[R]' and
`\f[CR]tmpl.annotate_file_filename\f[R]'.
Once the file is created, it is opened with an external text editor.
After editing the file, it will be \- if necessary \- renamed to be in
sync with the note\[cq]s metadata.
.PP
For example:
.IP
.EX
:> \[dq]Classic Shell Scripting.pdf\[dq]

tpnote \[dq]Classic Shell Scripting.pdf\[dq]
.EE
.PP
creates the note:
.IP
.EX
Classic Shell Scripting.pdf\-\-Note.md\[dq]
.EE
.PP
with the content:
.IP
.EX
\-\-\-
title\f[B]:\f[R]      Classic Shell Scripting.pdf
subtitle\f[B]:\f[R]   Note
author\f[B]:\f[R]     Getreu
date\f[B]:\f[R]       2023\-09\-15
lang\f[B]:\f[R]       en\-US
\-\-\-

\f[B][\f[R]Classic Shell Scripting.pdf\f[B]]\f[R](<Classic Shell Scripting.pdf>)
.EE
.PP
The configuration file variable `\f[CR]filename.extensions\f[R]' list
all the file extensions that Tp\-Note recognizes as own file types.
Only foreign file types can be annotated.
.PP
Note that the file annotation mode also reads the clipboard\[cq]s
content: when it is not empty, its data is appended to the new
note\[cq]s body.
.SS Convert a text file into a Tp\-Note file
Consider the content of the following text file
`\f[CR]Ascii\-Hangman\-\-A game for children.md\f[R]' whose creation
date is 13 March 2022:
.IP
.EX
A little game designed for primary kids to revise vocabulary in classroom.
.EE
.PP
To convert the text file into a Tp\-Note file type:
.IP
.EX
tpnote \-\-add\-header \-\-batch \[dq]Ascii\-Hangman\-\-A game for children.md\[dq]
.EE
.PP
NB: the `\f[CR]\-\-add\-header\f[R]' flag might not be necessary, as it
is enabled by default through the configuration file variable
`\f[CR]arg_default.add_header = true\f[R]'.
.PP
As a result of the above command, Tp\-Note converts the filename into:
.IP
.EX
20220313\-Ascii\-Hangman\-\-A game for children.md
.EE
.PP
and prepends a YAML header to the file\[cq]s content:
.IP
.EX
\-\-\-
title\f[B]:\f[R]      Ascii\-Hangman
subtitle\f[B]:\f[R]   A game for children
author\f[B]:\f[R]     Getreu
date\f[B]:\f[R]       2022\-03\-13
lang\f[B]:\f[R]       en\-US

orig_name\f[B]:\f[R]  Ascii\-Hangman\-\-A game for children.md
\-\-\-

A little game designed for primary kids to revise vocabulary in classroom.
.EE
.SS Use Tp\-Note in shell scripts
.IP \[bu] 2
\f[B]Use case: download a webpage and store it as Tp\-Note file\f[R]
.RS 2
.PP
Using the method displayed above you can save time and create a script
with:
.IP
.EX
sudo nano /usr/local/bin/download
.EE
.PP
Insert the following content:
.IP
.EX
\f[I]#!/bin/sh\f[R]
curl \[dq]$1\[dq] \f[B]|\f[R] tpnote
.EE
.PP
Instead of Tp\-Note\[cq]s internal HTML to Markdown converter, you can
alternatively use the external `\f[CR]pandoc\f[R]' converter.
This method offers the advantage to also convert the HTML page\[cq]s
metadata.
Currently, Tp\-Note\[cq]s internal converter lacks this feature.
.IP
.EX
\f[I]#!/bin/sh\f[R]
curl \[dq]$1\[dq] \f[B]|\f[R] pandoc \-\-standalone \-f html \-t markdown_strict+yaml_metadata_block \f[B]|\f[R] tpnote
.EE
.PP
Do not forget to make it runnable:
.IP
.EX
sudo chmod a+x /usr/local/bin/download
.EE
.PP
To execute the script type:
.IP
.EX
download \[aq]https://blog.getreu.net\[aq]
.EE
.RE
.SH NOTE FILE MANIPULATION
.SS Editing notes
Unless invoked with `\f[CR]\-\-batch\f[R]' or `\f[CR]\-\-view\f[R]',
Tp\-Note launches an external text editor after creating a new note.
This also happens when `\f[CR]<path>\f[R]' points to an existing
`\f[CR].md\f[R]'\-file.
.PP
For example: open and edit an existing note file:
.IP
.EX
cd \[dq]./03\-Favorite Readings\[dq]
tpnote 20211031\-Favorite Readings\-\-Note.md
.EE
.SS Viewing notes
Once Tp\-Note has launched the user\[cq]s file editor, it opens the note
file, renders its content to HTML, launches the user\[cq]s web browser
and connects it to Tp\-Note\[cq]s internal web server.
Then, Tp\-Note watches the note file and re\-renders the viewed HTML
when the content changes.
The note\[cq]s file extension determines which internal renderer is
activated.
.PP
Tp\-Note\[cq]s note built\-in viewer comprises three markup language
renders:
.IP "1." 3
`\f[CR]Markdown\f[R]'_ (file extension \f[CR].md\f[R])
.PD 0
.P
.PD
This renderer is CommonMark compatible and feature complete.
It understands, heading attributes, inline images, tables, task lists,
footnotes, strike\-through and LaTeX formula:
.RS 4
.IP
.EX
\[ga]\[ga]\[ga]math
x\[ha]n + y\[ha]n = z\[ha]n
\[ga]\[ga]\[ga]
.EE
.PP
Or:
.IP
.EX
$$
x\[ha]n + y\[ha]n = z\[ha]n
$$
.EE
.PP
Inline formulas are enclosed between Dollar characters,
e.g.\ `\f[CR]$\[rs]alpha$\f[R]' becomes
`\f[CR]\f[R]\f[I]α\f[R]\f[CR]\f[R]'.
.PP
Source code is highlighted when you annotate the programming language
(see also `\f[CR]tmpl_html.viewer_highlighting_theme\f[R]' and
`\f[CR]tmpl_html.exporter_highlighting_theme\f[R]'):
.IP
.EX
\f[BI]\[ga]\[ga]\[ga]rust\f[R]
\f[B]pub\f[R] \f[B]fn\f[R] main(){
  \f[B]let\f[R] w = \[dq]world!\[dq];
  println!(\[dq]Hallo {:?}\[dq], w);
}
\f[BI]\[ga]\[ga]\[ga]\f[R]
.EE
.PP
Heading attributes:
.IP
.EX
# text { #id .class1 .class2 myattr other_attr=myvalue }
.EE
.PP
is interpreted as a level 1 heading with the content text, ID
`\f[CR]id\f[R]', classes `\f[CR]class1\f[R]' and `\f[CR]class2\f[R]' and
custom attributes `\f[CR]myattr\f[R]' (without value) and
`\f[CR]other_attr\f[R]' with value `\f[CR]myvalue\f[R]'.
Note that ID, classes, and custom attributes should be space\-separated.
.RE
.IP "2." 3
`\f[CR]ReStructuredText\f[R]' (file extension \f[CR].rst\f[R])
.PD 0
.P
.PD
This renderer is experimental and covers only basic markup.
.IP "3." 3
`\f[CR]PlainText\f[R]' (link only renderer, file extension
\f[CR].txtnote\f[R])
.PD 0
.P
.PD
The purpose of this renderer is to make hyperlinks written in Markdown,
ReStructuredText, Asciidoc, HTML, Wikitext syntax clickable.
Only hyperlinks are rendered, all other text is shown verbatim.
.PP
Tp\-Note\[cq]s web server streams large media files without loading them
into memory.
Just refer to the media file as local link:
`\f[CR][my video](<dir/my video.mp4>)\f[R]'.
Make sure, that the file extension of the video file is registered with
`\f[CR]viewer.served_mime_types\f[R]'.
.SS Automatic filename synchronization before and after editing
Before launching the text editor and after closing it, Tp\-Note
synchronizes the filename with the note\[cq]s metadata.
When the user changes the metadata of a note, Tp\-Note will replicate
that change in the note\[cq]s filename.
As a result, \f[I]all your note\[cq]s filenames always correspond to
their metadata\f[R], which helps to retrieve your notes in large data
pools.
.PP
For example:
.IP
.EX
tpnote \[dq]20200306\-Favorite Readings\-\-Note.md\[dq]
.EE
.PP
The way how Tp\-Note synchronizes the note\[cq]s metadata and filename
is defined in the template `\f[CR]tmpl.sync_filename\f[R]'.
.PP
Once Tp\-Note opens the file in your text editor, let\[cq]s assume you
decide to change the title in the note\[cq]s YAML metadata section from
`\f[CR]title: Favorite Readings\f[R]' to
`\f[CR]title: Introduction to bookkeeping\f[R]'.
After closing the text editor, Tp\-Note updates the filename
automatically:
.IP
.EX
20200306\-Introduction to bookkeeping\-\-Note.md
.EE
.PP
Note: the sort tag `\f[CR]20200306\f[R]' has not changed.
The filename synchronization mechanism by default never does.
(See below for more details about filename synchronization).
.SS Printing note files
Tp\-Note renders note files to HTML.
The latter is either shown in the browser or can be exported with
`\f[CR]\-\-export\f[R]'.
When exporting to HTML, hyperlinks are passed through an internal link
rewriting engine that can be parametrized with
`\f[CR]\-\-export\-link\-rewriting\f[R]'.
The easiest way to print the resulting HTML, is to pipe it through an
HTML to PDF converter, e.g.\ \f[I]Weasyprint\f[R] or
\f[I]Wkhtmktopdf\f[R].
.IP
.EX
tpnote \-\-export=\- mynote.md \f[B]|\f[R] weasyprint \- mynote.md.pdf
.EE
.PP
\f[I]Weasyprint\f[R] supports the \c
.UR https://www.w3.org/TR/css-page-3/
CSS Paged Media
.UE \c
\ standard allowing to include page layout directives into HTML.
You can change the default page layout by modifying the HTML template
with the `\f[CR]tmpl_html.exporter_doc_css\f[R]' configuration file
variable.
.SS Use Tp\-Note in shell scripts
.IP \[bu] 2
\f[B]Use case: synchronize recursively filenames and metadata\f[R]
.RS 2
.PP
The following synchronizes bidirectionally all filenames with the
note\[cq]s YAML header data.
.IP
.EX
TPNOTE_USER=\[dq]John\[dq] find . \-type f \-name \[aq]*.md\[aq] \-exec tpnote \-a \-b {} > /dev/null \[rs];
.EE
.PP
The direction of the synchronization depends on whether the
`\f[CR].md\f[R]' file has a valid YAML header or not:
.IP \[bu] 2
A YAML header is present and valid: the header fields might update the
filename (see template `\f[CR]tmpl.sync_filename\f[R]').
A possible \f[I]sort\-tag\f[R] at the beginning of the filename remains
untouched.
.IP \[bu] 2
No YAML header: a new header is prepended (see template
`\f[CR]from_text_file_content\f[R]') and the filename might change
slightly (see template `\f[CR]from_text_file_filename\f[R]').
A possible \f[I]sort\-tag\f[R] at the beginning of the filename remains
untouched.
If the filename does not start with a sort tag, the file\[cq]s creation
date is prepended.
.RE
.SH OPTIONS
\f[B]\-a\f[R], \f[B]\-\-add\-header\f[R]
.RS
.PP
Prepends a YAML header in case the text file does not have one.
The default template, deduces the `\f[CR]title:\f[R]' and
`\f[CR]subtitle:\f[R]' header field from the filename.
It\[cq]s sort\-tag and file extension remain untouched.
In case the filename is lacking a \f[I]sort\-tag\f[R], the file creation
date in numerical format is prepended.
As this option is activated by default, it has no effect unless you set
`\f[CR]arg_default.add_header = false\f[R]' in the configuration file.
.RE
.PP
\f[B]\-b\f[R], \f[B]\-\-batch\f[R]
.RS
.PP
Do not launch the external text editor or viewer.
All other operations are available and are executed in the same way.
In batch mode, error messages are dumped on the console only and no
alert windows pop up.
.RE
.RS
.PP
Tp\-Note ignores the clipboard when run in batch mode with
`\f[CR]\-\-batch\f[R]'.
Instead, if available, it reads the \f[CR]stdin\f[R] stream as if the
data came from the clipboard.
.RE
.PP
\f[B]\-c\f[R] \f[I]FILE\f[R], \f[B]\-\-config\f[R]=\f[I]FILE\f[R]
.RS
.PP
Loads an additional configuration from the TOML formatted \f[I]FILE\f[R]
and merges it into the default configuration.
.RE
.PP
\f[B]\-C\f[R] \f[I]FILE\f[R],
\f[B]\-\-config\-defaults\f[R]=\f[I]FILE\f[R]
.RS
.PP
Dumps the internal default configuration in TOML format into
\f[I]FILE\f[R] or stdout if \f[I]FILE\f[R] equals to `\f[CR]\-\f[R]',
e.g.\ `\f[CR]tpnote \-C \- | less\f[R]'.
.RE
.PP
\f[B]\-d\f[R] \f[I]LEVEL\f[R], \f[B]\-\-debug\f[R]=\f[I]LEVEL\f[R]
.RS
.PP
Prints additional log messages.
The debug level \f[I]LEVEL\f[R] must be one out of `\f[CR]trace\f[R]',
`\f[CR]debug\f[R]', `\f[CR]info\f[R]', `\f[CR]warn\f[R]',
`\f[CR]error\f[R]' (default) or `\f[CR]off\f[R]'.
The level `\f[CR]trace\f[R]' reports the most detailed information,
while `\f[CR]error\f[R]' informs you only about failures.
A `\f[CR]warn\f[R]' level message means, that not all functionality
might be available or work as expected.
.RE
.RS
.PP
Use `\f[CR]\-b \-d trace\f[R]' for debugging templates and
`\f[CR]\-V \-b \-d trace\f[R]' for debugging configuration files.
If the HTTP server (viewer) does not work as expected:
`\f[CR]\-n \-d debug\f[R]'.
If your text editor does not open as expected:
`\f[CR]\-n \-d info \-\-edit\f[R]'.
Or, to observe the launch of the web browser:
`\f[CR]\-n \-d info \-\-view\f[R]'.
The option `\f[CR]\-d trace\f[R]' shows all available template
variables, the templates used and the rendered result of the
substitution.
This is particularly useful for debugging new templates.
The option `\f[CR]\-d off\f[R]' silences all error message reporting and
also suppresses the error pop\-up windows.
.RE
.RS
.PP
Note, under Linux, when \f[CR]\-d trace\f[R] is given, no pop\-up
messages appear.
Instead, the logs are dumped to the console from where you started
Tp\-Note.
.RE
.RS
.PP
All error messages are dumped in the error stream \f[CR]stderr\f[R] and
appear on the console from where Tp\-Note was launched:
.RE
.IP
.EX
    tpnote.exe \-\-debug info my_note.md
.EE
.RS
.PP
Under Windows the output must be redirected into a file to see it:
.RE
.IP
.EX
    tpnote.exe \-\-debug info my_note.md >debug.md 2>&1
.EE
.RS
.PP
Alternatively, you can redirect all log file entries into popup alert
windows.
.RE
.IP
.EX
    tpnote.exe \-\-popup \-\-debug info my_note.md
.EE
.RS
.PP
The same can be achieved by setting following configuration file
variables (especially useful with Windows):
.RE
.IP
.EX
    [arg_default]
    debug = \[aq]info\[aq]
    popup = true
.EE
.RS
.PP
The value for `\f[CR]arg_default.debug\f[R]' must be one out of
`\f[CR]trace\f[R]', `\f[CR]debug\f[R]', `\f[CR]info\f[R]',
`\f[CR]warn\f[R]', `\f[CR]error\f[R]' (default) and `\f[CR]off\f[R]'.
They have the same meaning as the corresponding command line options.
.RE
.PP
\f[B]\-e\f[R], \f[B]\-\-edit\f[R]
.RS
.PP
Edit only mode: opens the external text editor, but not the file viewer.
This disables Tp\-Note\[cq]s internal file watcher and web server,
unless `\f[CR]\-v\f[R]' is given.
Alternatively you can set the environment variable
`\f[CR]TPNOTE_BROWSER=\[dq]\[dq]\f[R]' to the empty string.
Another way to permanently disable the web server is to set the
configuration variable `\f[CR]arg_default.edit=true\f[R]'.
When `\f[CR]\-\-edit \-\-view\f[R]' appear together, both the editor and
the viewer will open and the \f[CR]arg_default.edit\f[R] variable is
ignored.
.RE
.PP
\f[B]\-l\f[R] \f[I]LANGUAGE_TAG\f[R],
\f[B]\-\-force\-lang\f[R]=\f[I]LANGUAGE_TAG\f[R]
.RS
.PP
Disables the automatic language detection while creating a new note file
and use \f[I]LANGUAGE_TAG\f[R] instead.
\f[I]LANGUAGE_TAG\f[R] is formatted as IETF BCP 47 language tag,
e.g.\ `\f[CR]en\-US\f[R]'.
If \f[I]LANGUAGE_TAG\f[R] equals `\f[CR]\-\f[R]', the environment
variable `\f[CR]TPNOTE_LANG\f[R]' determines the language instead; or,
if the latter is not defined, the user\[cq]s default language, as
reported from the operating system\[cq]s locale setting, is decisive.
.RE
.PP
\f[B]\-p\f[R] \f[I]PORT\f[R], \f[B]\-\-port\f[R]=\f[I]PORT\f[R]
.RS
.PP
Sets the server port that the web browser connects to, to the specified
value \f[I]PORT\f[R].
If not given, a random available port is chosen automatically.
.RE
.PP
\f[B]\-n\f[R], \f[B]\-\-no\-filename\-sync\f[R]
.RS
.PP
Whenever Tp\-Note opens a note file, it synchronizes its YAML\-metadata
with its filename.
`\f[CR]\-\-no\-filename\-sync\f[R]' disables this synchronization.
In addition, in scripts this flag can be especially useful for
validating the syntax of `\f[CR].md\f[R]'\-files.
See section EXIT STATUS for more details.
The section METADATA FILENAME SYNCHRONIZATION shows alternative ways to
disable synchronization.
.RE
.PP
\f[B]\-s\f[R] \f[I]PORT\f[R], \f[B]\-\-scheme\f[R]=\f[I]SCHEME_NAME\f[R]
.RS
.PP
Sets the filename scheme for creating a new note file.
This overwrites the `\f[CR]arg_default.scheme\f[R]' value in the
configuration file.
Under `\f[CR][[scheme]]\f[R]' follows the definition of the schemes.
The default configuration ships two schemes with the SCHEME_NAMES
`\f[CR]default\f[R]' and `\f[CR]zettel\f[R]' (for Zettelkasten).
.RE
.PP
\f[B]\-t\f[R], \f[B]\-\-tty\f[R]
.RS
.PP
Tp\-Note tries different heuristics to detect whether a graphic
environment is available or not.
For example, under Linux, the `\f[CR]DISPLAY\f[R]' environment variable
is evaluated.
The `\f[CR]\-\-tty\f[R]' flag disables the automatic detection and sets
Tp\-Note into \[lq]console only\[rq] mode: now only the non GUI editor
(see configuration variable: `\f[CR]app_args.editor_console\f[R]') and
no viewer is launched.
.RE
.PP
\f[B]\-u\f[R], \f[B]\-\-popup\f[R]
.RS
.PP
Redirects log file entries into pop\-up alert windows.
Must be used together with the \f[B]\-\-debug\f[R] option to have an
effect.
Note, that debug level `\f[CR]error\f[R]' conditions will always trigger
pop\-up messages, regardless of \f[B]\-\-popup\f[R] and
\f[B]\-\-debug\f[R] (unless `\f[CR]\-\-debug off\f[R]').
Pop\-up alert windows are queued and will never interrupt Tp\-Note.
To better associate a particular action with its log events, read
through all upcoming pop\-up alert windows until they fail to appear.
As this option is activated by default, it has no effect unless you set
`\f[CR]arg_default.popup = false\f[R]' in the configuration file.
.RE
.PP
\f[B]\-v\f[R], \f[B]\-\-view\f[R]
.RS
.PP
View only mode: do not open the external text editor.
This flag instructs Tp\-Note to start an internal file watcher and web
server and connect the system\[cq]s default web browser to view the note
file and to observe live file modifications.
The configuration setting `\f[CR]arg_default.edit=true\f[R]' or the
environment variable `\f[CR]TPNOTE_EDITOR=\[dq]\[dq]\f[R]' disables the
viewer.
However, with `\f[CR]\-\-view\f[R]' given at the command line, the
viewer appears, regardless of the value of
`\f[CR]arg_default.edit\f[R]'.
.RE
.RS
.PP
NB: By default, Tp\-Note tries to synchronize every file it opens.
To prevent the viewed filename from changing, `\f[CR]\-\-view\f[R]' can
be used together with `\f[CR]\-\-no\-filename\-sync\f[R]'.
.RE
.PP
\f[B]\-V\f[R], \f[B]\-\-version\f[R]
.RS
.PP
Print Tp\-Note\[cq]s version, its built\-in features and the path to the
sourced configuration file.
The output is YAML formatted for further automatic processing.
In addition, use `\f[CR]\-V \-b \-d trace\f[R]' for configuration file
debugging.
.RE
.PP
\f[B]\-x\f[R] \f[I]DIRECTORY\f[R],
\f[B]\-\-export\f[R]=\f[I]DIRECTORY\f[R]
.RS
.PP
Prints the note as HTML rendition into \f[I]DIRECTORY\f[R].
`\f[CR]\-x \-\f[R]' prints to \f[I]stdout\f[R].
If \f[I]DIRECTORY\f[R] is a relative path, \f[I]DIRECTORY\f[R] is
appended to the document directory.
For example, e.g.\ `\f[CR]\-\-export=.\f[R]' or `\f[CR]\-x ./\f[R]',
prints the HTML rendition in the directory where the note file resides.
This option prevents the launch of the external text editor and viewer
and can be combined with `\f[CR]\-\-batch\f[R]' to avoid pop\-up error
alert windows.
.RE
.PP
\f[B]\-\-export\-link\-rewriting\f[R]=\f[I]MODE\f[R]
.RS
.PP
Chooses how local links in the exported HTML file are written out:
`\f[CR]off\f[R]', `\f[CR]short\f[R]' or `\f[CR]long\f[R]' (default).
No link rewriting occurs, for the \f[I]MODE\f[R] `\f[CR]off\f[R]'.
The \f[I]MODE\f[R] `\f[CR]short\f[R]' rewrites all local relative links
to absolute links, whose base is the first parent directory containing
the marker file `\f[CR]tpnote.toml\f[R]'.
NB, the directory of the marker file defines the base for all absolute
local links in your Tp\-Note file!
The mode `\f[CR]long\f[R]' rewrites \f[I]all\f[R] local links to
absolute links whose base is the system\[cq]s root directory
`\f[CR]/\f[R]'.
For relative local links this is performed by prepending the path to the
note file.
Absolute local links get the path to the marker file
`\f[CR]tpnote.toml\f[R]' prepended.
In case you do not place a `\f[CR]tpnote.toml\f[R]' file in a parent
directory, the base for absolute local links in your note file is
interpreted as `\f[CR]/\f[R]'.
.RE
.RS
.PP
The right \f[I]MODE\f[R] choice depends on how you view the resulting
HTML: if you publish on a web server, then `\f[CR]short\f[R]' might be a
good choice.
Do not forget to place a marker file `\f[CR]tpnote.toml\f[R]' somewhere
in the document\[cq]s path.
If you view the HTML file directly in your web browser, better choose
`\f[CR]long\f[R]'.
In this case, the present of a marker file will not affect the output.
NB: You can also set this option via Tp\-Note\[cq]s configuration file
with the key `\f[CR]arg_default.export_link_rewriting\f[R]'.
.RE
.SH THE NOTE\[cq]S DOCUMENT STRUCTURE
Tp\-Note considers a text file to be a valid note file, if its:
.IP \[bu] 2
file extension is listed in one of the configuration file variable
`\f[CR]filename.extensions\f[R]'; if its
.IP \[bu] 2
content has a valid YAML header and
.IP \[bu] 2
the YAML header contains a key whose name is defined in the
configuration file variable `\f[CR]tmpl.compulsory_header_field\f[R]'
(default `\f[CR]title\f[R]').
.PP
A Tp\-Note note file is always UTF\-8 encoded.
As newline, either the Unix standard `\f[CR]\[rs]n\f[R]' or the Windows
standard `\f[CR]\[rs]r\[rs]n\f[R]' is accepted.
Tp\-Note writes out newlines according the operating system it runs on.
.SS The document\[cq]s header and body
Tp\-Note is designed to be compatible with `\f[CR]Pandoc\f[R]\[cq]s
and'\f[CR]RMarkdown\f[R]s document structure as shown in the figure
below.
In this documentation the terms \[lq]YAML header\[rq], \[lq]header\[rq]
and \[lq]front matter\[rq] are used as synonyms to designate to
document\[cq]s metadata block at the beginning of the text file:
.IP
.EX
\-\-\-
<YAML\-front\-matter>
\-\-\-

<document\-body>
.EE
.PP
The YAML front\-matter starts at the beginning of the document with
`\f[CR]\-\-\-\f[R]' and ends with `\f[CR]...\f[R]' or
`\f[CR]\-\-\-\f[R]'.
Note that according to the YAML standard, string literals are always
encoded as JSON strings.
By convention, a valid Tp\-Note file has at least one YAML field named
`\f[CR]title:\f[R]' (the name of this compulsory field is defined by the
`\f[CR]tmpl.compulsory_header_field\f[R]' variable in the configuration
file and can be changed there).
.PP
Note that prepended text, placed before the YAML front\-matter, is
ignored.
There are however certain restrictions: If present, the skipped text
should not be too long (cf.\ constant
`\f[CR]BEFORE_HEADER_MAX_IGNORED_CHARS\f[R]' in the source code of
Tp\-Note) and it must be followed by at least one blank line:
.IP
.EX
Prepended text is ignored.

\-\-\-
<YAML\-front\-matter>
\-\-\-

<document\-body>
.EE
.PP
There is no restriction about the markup language being used in the
note\[cq]s text body.
However, the default templates assume Markdown and the file extension
`\f[CR].md\f[R]'.
Both can be changed easily by adapting Tp\-Note\[cq]s configuration
file.
Besides the requirements concerning its header, a valid Tp\-Note file
must have a filename extension that is listed in the configuration file
variable: `\f[CR]filename.extensions\f[R]'.
The latter also determines which internal markup language render is
called for Tp\-Note\[cq]s internal viewer.
.SS Links to resources and other documents
.SS Link types
The document\[cq]s body often contains (inline) links to resources
e.g.\ images and links to other documents.
This section describes how the automatic path rewriting of local links
works.
.PP
In general, the link syntax depends on the markup language used in the
Tp\-Note file.
The following examples illustrate the different link types Tp\-Note
understands:
.PP
.TS
tab(@);
lw(26.5n) lw(43.5n).
T{
Link type
T}@T{
Example in Markdown notation
T}
_
T{
Absolute URL
T}@T{
`\f[CR][blog](<https://blog.getreu.net>)\f[R]'
T}
T{
Relative URL (=local link)
T}@T{
`\f[CR]![Alt text](<images/my logo.png>)\f[R]'
T}
T{
Absolute local link
T}@T{
`\f[CR]![Alt text](</images/my logo.png>)\f[R]'
T}
T{
Relative local link
T}@T{
`\f[CR]![Alt text](<images/my logo.png>)\f[R]'
T}
T{
Relative local link
T}@T{
`\f[CR][my doc](<../../notes/31\-my doc.md>)\f[R]'
T}
T{
Relative local autolink
T}@T{
`\f[CR]<tpnote:../../notes/31\-my%20doc.md>\f[R]'
T}
T{
Shorthand link
T}@T{
`\f[CR][my doc](<../../notes/31>)\f[R]'
T}
T{
Shorthand autolink
T}@T{
`\f[CR]<tpnote:../../notes/31>\f[R]'
T}
T{
Formatted shorthand link
T}@T{
`\f[CR]<tpnote:../../notes/31?\-\->)\f[R]'
T}
.TE
.PP
Remarks:
.IP \[bu] 2
The base for absolute local links is the first parent directory
containing the marker file `\f[CR]tpnote.toml\f[R]'.
If absent, absolute local links refer to the root directory
`\f[CR]/\f[R]'.
.IP \[bu] 2
\f[I]Shorthand link\f[R]: Instead of writing out the full link
destination, e.g.\ 
`\f[CR][my doc](<./docs/20230508\-my note.md>)\f[R]', you can shorten
the link to `\f[CR][my doc](<docs/20230508>)\f[R]' indicating only the
destination\[cq]s sort\-tag.
Alternatively, the same shorthand link can be expressed as autolink as
well: `\f[CR]<http:docs/20230508>\f[R]'.
NB, if more than one document with the same sort\-tag exist in a
directory, the viewer only displays the first in alphabetical order.
To set up a different order, you can extend the sort\-tag until it
becomes unique, e.g.\ by renaming the destination document in the above
example to `\f[CR]./ docs/20230508a\-my note.md\f[R]'.
This way you obtain the unique sort\-tag `\f[CR]20230508a\f[R]'.
.PP
Although Tp\-Note\[cq]s built in viewer follows absolute and relative
local links, usually the latter are preferred.
They make moving documents easier, as relative links do not break when
the source and the destination documents are moved together.
.PP
As mentioned above, the shortest way to refer to other Tp\-Note
documents, is indicating their sort\-tag only,
e.g.\ `\f[CR]<tpnote:dir/123>\f[R]' and
`\f[CR][my file](<tpnote:dir/123>)\f[R]'.
If the other document is located in the same directory, the links are
even shorter: `\f[CR]<tpnote:123>\f[R]' and
`\f[CR][my file](<tpnote:123>)\f[R]'.
.SS Local links in HTML export
Tp\-Note\[cq]s exporter function `\f[CR]\-\-export\f[R]' converts a
given Tp\-Note file into HTML and adds `\f[CR].html\f[R]' to the output
filename.
Links in the documents content to other Tp\-Note files are hereby
rewritten by appending `\f[CR].html\f[R]' to their URLs.
This way you can convert groups of documents to HTML and later jump from
document to document in your web browser.
The option `\f[CR]\-\-export\-link\-rewriting\f[R]' allows you to
fine\-tune how local links are written out.
Valid values are: `\f[CR]off\f[R]', `\f[CR]short\f[R]' and
`\f[CR]long\f[R]'.
.PP
In order to achieve this, the user must respect the following convention
concerning absolute paths in local links in Tp\-Note documents: When a
document contains a local link with an absolute path, the base of this
path is considered to be the directory where the marker file
`\f[CR]tpnote.toml\f[R]' resides (or `\f[CR]/\f[R]' in non exists).
The option `\f[CR]\-\-export\-link\- rewriting\f[R]' decides how local
links in the Tp\-Note document are converted when the HTML is generated.
If its value is `\f[CR]short\f[R]', then local links with relative paths
are converted to absolute paths.
The base of the resulting path is where the `\f[CR]tpnote.toml\f[R]'
file resides (or \f[CR]/\f[R] if none exists).
Consider the following example
`\f[CR]\-\-export\-link\-rewriting=short\f[R]':
.IP \[bu] 2
The Tp\-Note file `\f[CR]/my/docs/car/bill.md\f[R]' contains
.IP \[bu] 2
an absolute local link: `\f[CR]/car/scan.jpg\f[R]',
.IP \[bu] 2
and another relative local link: `\f[CR]./photo.jpg\f[R]'.
.IP \[bu] 2
The document root marker is: `\f[CR]/my/docs/tpnote.toml\f[R]'.
.PP
The images in the resulting HTML will appear as
.IP \[bu] 2
`\f[CR]/car/scan.jpg\f[R]'.
.IP \[bu] 2
`\f[CR]/car/photo.jpg\f[R]'.
.PP
For `\f[CR]\-\-export\-link\-rewriting=long\f[R]', in addition to the
above, all absolute paths in local links are prepended with the marker
file\[cq]s directory.
Consider the following example:
.IP \[bu] 2
The Tp\-Note file `\f[CR]/my/docs/car/bill.md\f[R]' contains
.IP \[bu] 2
an absolute local link: `\f[CR]/car/scan.jpg\f[R]',
.IP \[bu] 2
and another relative local link: `\f[CR]./photo.jpg\f[R]'.
.IP \[bu] 2
The document root marker is: `\f[CR]/my/docs/tpnote.toml\f[R]'.
.PP
The images in the resulting HTML will appear as
.IP \[bu] 2
`\f[CR]/my/docs/car/scan.jpg\f[R]'.
.IP \[bu] 2
`\f[CR]/my/docs/car/photo.jpg\f[R]'.
.PP
Summary: The right `\f[CR]\-\-export\-link\-rewriting\f[R]' choice
depends on how you view the resulting HTML: if you publish on a web
server, then `\f[CR]short\f[R]' might be a good choice (do not forget to
place a marker file `\f[CR]tpnote.toml\f[R]' somewhere in the
document\[cq]s path).
If you view the HTML file directly in your web browser, better choose
`\f[CR]long\f[R]'.
.SS Local links with format strings
So far, we have seen how Tp\-Note\[cq]s viewer and HTML exporter
converts the \f[I]destination\f[R] of local links
`\f[CR][text](destination)\f[R]'.
Concerning the local link\[cq]s \f[I]text\f[R] property, the situation
is simpler as the \f[I]text\f[R] property never changes during the above
discussed rewriting process.
However, it is possible to overwrite the displayed text property by
appending a \f[I]format string\f[R] to the destination:
`\f[CR][formatted destination](destination?format string)\f[R]'.
.PP
All local links in the following tables have the same link destination
`\f[CR]dir/01ac\-Tulips\-\-red, yellow.md\f[R]'.
The examples differ only in the way the link is displayed in the
browser.
.PP
.TS
tab(@);
lw(50.1n) lw(19.9n).
T{
Local link
T}@T{
What you see
T}
_
T{
`\f[CR][matters](<dir/01ac\-Tulips\-\-red, yellow.md>)\f[R]'
T}@T{
matters
T}
T{
`\f[CR][matters](<dir/01ac>)\f[R]'
T}@T{
matters
T}
.TE
.PP
.TS
tab(@);
lw(50.4n) lw(19.6n).
T{
Formatted local link
T}@T{
What you see
T}
_
T{
`\f[CR][whatever](<dir/01ac\-Tulips\-\-red, yellow.md?>)\f[R]'
T}@T{
Tulips\[en]red, yellow
T}
T{
`\f[CR][whatever](<dir/01ac?>)\f[R]'
T}@T{
Tulips\[en]red, yellow
T}
T{
`\f[CR][whatever](<dir/01ac?,>)\f[R]'
T}@T{
Tulips\[en]red
T}
T{
`\f[CR][whatever](<dir/01ac?\-\->)\f[R]'
T}@T{
Tulips
T}
T{
`\f[CR][whatever](<dir/01ac?\-\-:,>)\f[R]'
T}@T{
red
T}
T{
`\f[CR][whatever](<dir/01ac?#>)\f[R]'
T}@T{
01ac
T}
T{
`\f[CR][whatever](<dir/01ac??>)\f[R]'
T}@T{
01ac\-Tulips\[en]red, yellow.md
T}
.TE
.PP
Observations:
.IP "1." 3
The format operator `\f[CR]?\f[R]' (not followed by a `\f[CR]#\f[R]')
strips the path, the sort\-tag, the copy\-counter and the filename
extension.
In other words, it keeps only the file stem.
.IP "2." 3
The string following the question mark is the \f[I]to pattern\f[R]:
`\f[CR]?<to>\f[R]'.
It marks the exclusive end of the matching.
.IP "3." 3
Consider the pattern `\f[CR]?<from>:<to>\f[R]': The string before the
colon is the \f[I]from pattern\f[R], the string after the colon is the
\f[I]to pattern\f[R].
Patterns are always searched from the start of the string, e.g.\ in
Latin scripts from the left to the right.
.IP "4." 3
The format operator `\f[CR]?#\f[R]' prints the sort\-tag.
.IP "5." 3
The format operator `\f[CR]??\f[R]' prints the whole filename.
.IP "6." 3
All format operators can be optionally followed by a search pattern.
.PP
.TS
tab(@);
lw(40.5n) lw(29.5n).
T{
Local autolink
T}@T{
What you see
T}
_
T{
`\f[CR]<tpnote:dir/01ac\-Tulips\-\-red,%20yellow.md>\f[R]'
T}@T{
dir/01ac\-Tulips\[en]red,%20yellow.md
T}
T{
`\f[CR]<tpnote:dir/01ac>\f[R]'
T}@T{
dir/01ac
T}
T{
T}@T{
T}
.TE
.PP
.TS
tab(@);
lw(44.0n) lw(26.0n).
T{
Formatted local autolink
T}@T{
What you see
T}
_
T{
`\f[CR]<tpnote:dir/01ac\-Tulips\-\-red,%20yellow.md?>\f[R]'
T}@T{
Tulips\[en]red, yellow
T}
T{
`\f[CR]<tpnote:dir/01ac?>\f[R]'
T}@T{
Tulips\[en]red, yellow
T}
T{
`\f[CR]<tpnote:dir/01ac??>\f[R]'
T}@T{
01ac\-Tulips\[en]red, yellow.md
T}
T{
`\f[CR]<tpnote:dir/01ac??.>\f[R]'
T}@T{
01ac\-Tulips\[en]red, yellow
T}
T{
`\f[CR]<tpnote:dir/01ac??:.>\f[R]'
T}@T{
01ac\-Tulips\[en]red, yellow
T}
T{
`\f[CR]<tpnote:dir/01ac??\-:,>\f[R]'
T}@T{
Tulips\[en]red
T}
T{
`\f[CR]<tpnote:dir/01ac??\-\-:,>\f[R]'
T}@T{
red
T}
.TE
.SH METADATA FILENAME SYNCHRONIZATION
Consider the following Tp\-Note filename generated with the
\f[I]default\f[R] filename scheme (cf section \[lq]Filename
synchronization schemes\[rq] for other schemes):
.IP
.EX
20151208\-Make this world a better place\-\-Suggestions.md
.EE
.PP
The filename has 4 parts:
.IP
.EX
{{ fm.fm_sort_tag }}\-{{ fm.fm_title }}\-\-{{ fm.fm_subtitle }}.{{ fm.fm_file_ext }}
.EE
.PP
The `\f[CR]\-\f[R]' between `\f[CR]{{ fm.fm_sort_tag }}\f[R]' and
`\f[CR]{{ fm.fm_title }}\f[R]' is hereafter referred to as
\f[I]sort\-tag separator\f[R]
(cf.\ `\f[CR]filename.sort_tag.separator\f[R]').
.PP
A so\-called \f[I]sort tag\f[R] is an alphanumerical prefix at the
beginning of the filename.
It is used to order files and notes in the file system.
Besides numerical digits and lowercase letters, a \f[I]sort tag\f[R] may
contain any combination of `\f[CR]_\f[R]', `\f[CR]\-\f[R]',
`\f[CR]=\f[R]' and `\f[CR].\f[R]' (cf.\ 
`\f[CR]filename.sort_tag.extra_chars\f[R]').
If a sort\-tag contains lowercase letters, only 2 in a row are allowed
(cf.\  `\f[CR]filename.sort_tag.letters_in_succession_max\f[R]').
For example:
.IP \[bu] 2
\f[I]Chronological sort tag\f[R]
.RS 2
.IP
.EX
  20140211\-Reminder.doc
  20151208\-Manual.pdf
  2015\-12\-08\-Manual.pdf
.EE
.PP
NB: All chronological sort\-tags must have at least one counter with 4
digits or more, e.g.\ `\f[CR]2015\f[R]'.
The character `\f[CR]\-\f[R]' between the counters is optional.
.PP
Tip: Always include the year with 4 digits in chronological sort\-tags.
.RE
.IP \[bu] 2
\f[I]Sequence number sort tag\f[R]
.RS 2
.IP
.EX
  02\-Invoices/
  08\-Tax documents/
  09_2_144\-Manual.pdf
  09.9.1\-Notes.md
.EE
.PP
NB: None of the counters exceeds 3 digits (cf.\ 
`\f[CR]filename.sort_tag.sequential.digits_in_succession_max\f[R]')
which is the criterium to recognize a sequence number sort\-tag.
The largest counter in these examples is `\f[CR]144\f[R]', so all
sort_tags are sequence numbers.
.RE
.IP \[bu] 2
\f[I]Alphanumerical sequence number sort tag\f[R]
.RS 2
.IP
.EX
  02\-Invoices/
  08\-Tax documents/
  09b144\-Manual.pdf
  09i1\-Notes.md
.EE
.PP
NB: the example is equivalent to the previous one.
The only difference is, that the separators are expressed through the
alternation of digits and letters.
.RE
.PP
\f[B]Summary:\f[R]
.IP "1." 3
A \f[I]sort\-tag\f[R] is composed of a number of counters, which can be
numerical, e.g.\ `\f[CR]123.28\f[R]' or combined numerical/letter based,
e.g.\ `\f[CR]123ab\f[R]'.
.IP "2." 3
A counter is set of digits (base 10) `\f[CR]123\f[R]' or a set of
lowercase letters (base 26) `\f[CR]ab\f[R]'.
.IP "3." 3
A letter based counter can be maximal 2 letters wide.
Its maximum is `\f[CR]zz\f[R]'
(cf.\ `\f[CR]filename.sort_tag.letters_in_succession_max\f[R]').
.IP "4." 3
A \f[I]sequential sort\-tag\f[R] is a sort\-tag that whose counters are
at most 3 digits wide
(cf.\ `\f[CR]sort_tag.sequential.digits_in_succession_max\f[R]').
.IP "5." 3
The filter `\f[CR]incr_sort_tag\f[R]' increments only sequential
sort\-tags.
.IP "6." 3
In order not to confuse sequential and chronological sort\-tags, it is
recommended to always write out the year in chronological sort\-tags
with 4 digits, e.g.\ \[cq]`\f[CR]2013\-08\-10\f[R]' or
`\f[CR]20130810\f[R]'.
.PP
Before Tp\-Note creates a new note file, it searches the current
directory for the latest existing Tp\-Note file.
If that file starts with a sequence number sort\-tag, Tp\-Note
increments that number and uses the result as sort\-tag for the new note
file.
Otherwise, the new note gets a chronological sort tag of today.
.PP
A note\[cq]s filename is said to be in sync with its metadata, when the
following holds (slightly simplified, see
`\f[CR]tmpl.sync_filename\f[R]'):
.RS
.PP
filename on disk without \f[I]sort tag\f[R] ==
`\f[CR]{{ fm.fm_title }}\-\-{{ fm.fm_subtitle }}.md\f[R]'
.RE
.PP
[1]
.PP
For example, consider the following document with the filename:
.IP
.EX
20211031\-My file.md
.EE
.PP
and the content:
.IP
.EX
\-\-\-
title\f[B]:\f[R]      1. The Beginning
subtitle\f[B]:\f[R]   Note
author\f[B]:\f[R]     Getreu
date\f[B]:\f[R]       2021\-10\-31
lang\f[B]:\f[R]       en\-GB

remainder\f[B]:\f[R]  false
\-\-\-
.EE
.PP
As `\f[CR]My file.md\f[R]' is not equal to
`\f[CR]1. The Beginning\-\-Note.md\f[R]', Tp\-Note will rename the file
to `\f[CR]20211031\-1. The Beginning\-\-Note.md\f[R]'.
If the filename had been `\f[CR]05_02\-My file.md\f[R]', it would rename
it to `\f[CR]05_02\-1. The Beginning\-\-Note.md\f[R]'.
.PP
Note: When the YAML front\-matter does not contain the optional
`\f[CR]sort_tag\f[R]' variable, Tp\-Note will never change a sort tag.
Nevertheless, it might change the rest of the filename!
.PP
The reason why by default Tp\-Note does not change sort tags is, that
they define their order in the file listing.
In general this order is independent of the notes content.
The simplest way to organize the sort tags of your files is by renaming
them directly in your file system.
Nevertheless, in some cases you might want to have full control over the
whole filename through the note\[cq]s YAML front\-matter.
For example, if \[em] for some reason \[em] you have changed the
document\[cq]s date in the front\-matter and you want to change the
chronological sort tag in one go.
In order to overwrite the note\[cq]s sort tag on disk, you can add a
`\f[CR]sort_tag\f[R]' string\-variable to its front\-matter:
.IP
.EX
\-\-\-
title\f[B]:\f[R]      1. The Beginning
date\f[B]:\f[R]       2021\-10\-31

sort_tag\f[B]:\f[R]   \[aq]20211101\[aq]
\-\-\-
.EE
.PP
Note, the above sort\-tag value \- here a number \- must be enclosed
with quotes in order label it as string type.
When Tp\-Note synchronizes the note\[cq]s metadata with its filename, it
will also change the sort tag from `\f[CR]20211031\f[R]' to
`\f[CR]20211101\f[R]'.
The resulting filename becomes
`\f[CR]20211101\-1. The Beginning\-\-Note.md\f[R]'.
.PP
The `\f[CR]sort_tag\f[R]' variable also becomes handy, when you want to
create one single note without any sort tag:
.IP
.EX
\-\-\-
title\f[B]:\f[R]      1. The Beginning

sort_tag\f[B]:\f[R]   \[aq]\[aq]
\-\-\-
.EE
.PP
In the same way, how it is possible to pin the sort tag of the note from
within the note\[cq]s metadata, you can also change the file extension
by adding the optional `\f[CR]file_ext\f[R]' variable into the
note\[cq]s front\-matter:
.IP
.EX
\-\-\-
title\f[B]:\f[R]      1. The Beginning

file_ext\f[B]:\f[R]   rst
\-\-\-
.EE
.PP
This will change the file extension from `\f[CR].md\f[R]' to
`\f[CR].rst\f[R]'.
The resulting filename becomes
`\f[CR]20211101\-1. The Beginning\-\-Note.rst\f[R]'.
.PP
Important: `\f[CR]rst\f[R]' must be one of the registered file
extensions listed in the `\f[CR]filename.extensions\f[R]' variable in
Tp\-Note\[cq]s configuration file.
If needed you can add more extensions there.
If the new filename extension is not listed in one of these variables,
Tp\-Note will not be able to recognize the note file as such and will
not open it in the external text editor and viewer.
.PP
Note: When a `\f[CR]sort_tag\f[R]' variable is defined in the note\[cq]s
YAML header, you should not change the sort tag string in the note\[cq]s
file name manually by renaming the file, as your change will be
overwritten next time you open the note with Tp\-Note.
However, you can switch back to Tp\-Note\[cq]s default behaviour any
time by deleting the `\f[CR]sort_tag\f[R]' line in the note\[cq]s
metadata.
The same applies to the `\f[CR]file_ext\f[R]' variable.
.PP
The metadata filename synchronization feature can be disabled
permanently by setting the configuration file variable
`\f[CR]arg_default.no_filename_sync = true\f[R]'.
To disable this feature for one time only, invoke Tp\-Note with
`\f[CR]\-\-no\-filename\-sync\f[R]'.
To exclude a particular note from filename synchronization, add the YAML
header field `\f[CR]filename_sync: false\f[R]'.
.IP
.EX
\-\-\-
title\f[B]:\f[R]         1. The Beginning   

filename_sync\f[B]:\f[R] false
\-\-\-
.EE
.PP
Note, that in the above described examples, the information flow always
goes from the YAML note header towards the note\[cq]s filename.
However, when Tp\-Note opens a text file without a YAML header, a new
header is added automatically.
In this case the information flow goes from the filename towards the
header, namely in the opposite direction.
Once the new header is prepended to the text file, a regular filename
synchronization \- as described above \- is triggered and executed as
described above.
.SS Filename synchronization schemes
Technically, the rules how the note\[cq]s header relates to its filename
are encoded in customizable so\-called filename templates (cf.\ section
\f[I]Templates\f[R]).
These templates exist in two different variants referred to as
\f[I]default scheme\f[R] and \f[I]zettel scheme\f[R]:
.IP "1." 3
The \f[CR]\[aq]default\[aq]\f[R] scheme:
.RS 4
.PP
For example:
.IP
.EX
\-\-\-
title\f[B]:\f[R]      1. The Beginning
subtitle\f[B]:\f[R]   Note
\-\-\-

Once upon a time...
.EE
.PP
The filename synchronization template from the \f[I]default scheme\f[R]
set looks like (simplified):
.IP
.EX
{{ fm.fm_sort_tag }}\-{{ fm.fm_title }}\-\-{{ fm.fm_subtitle }}.{{ fm.fm_file_ext }}
.EE
.PP
It generates from the above example the filename:
.IP
.EX
20211031\-1. The Beginning\-\-Note.md 
.EE
.RE
.IP "2." 3
The `\f[CR]zettel\f[R]' scheme:
.RS 4
.PP
Although the default scheme covers most of the daily note\-taking,
Luhmann\[cq]s \f[I]Zettelkasten\f[R] knowledge management system
requires slightly different templates, hence the name \f[I]zettel
scheme\f[R].
.PP
The following example illustrates the header fields of a typical
`\f[CR]zettel\f[R]' scheme note file:
.IP
.EX
\-\-\-
title\f[B]:\f[R]    Lemon
keywords\f[B]:\f[R]
          \f[B]\-\f[R] fruit
          \f[B]\-\f[R] round
          \f[B]\-\f[R] sour taste
scheme\f[B]:\f[R]   zettel
sort_tag\f[B]:\f[R] 2b3
\-\-\-

The [lemon] belongs to the Rutaceae family.
\f[B][\f[R]lemon\f[B]]:\f[R] https://en.wikipedia.org/wiki/Lemon
.EE
.PP
The filename synchronization template from the \f[I]zettel scheme\f[R]
set looks like (simplified):
.IP
.EX
{{ fm.fm_sort_tag }}\-\-{{ fm.fm_title }}__{{ fm.fm_keywords }}.{{ fm.fm_file_ext }}
.EE
.PP
It generates the following filename:
.IP
.EX
2b3\-\-Lemon__fruit_round_sour taste.md
.EE
.RE
.SH CUSTOMIZATION
Tp\-Note is shipped with a default internal configuration that can be
customized by merging a series of configuration files from various
locations into the default values.
This happens in the following order:
.IP "1." 3
Unix and macOS only: `\f[CR]/etc/tpnote/tpnote.toml\f[R]'
.IP "2." 3
The file the environment variable `\f[CR]TPNOTE_CONFIG\f[R]' points to.
.IP "3." 3
The user\[cq]s configuration file:
.RS 4
.IP \[bu] 2
Unix: `\f[CR]\[ti]/.config/tpnote/tpnote.toml\f[R]'
.IP \[bu] 2
Windows:
`\f[CR]C:\[rs]Users\[rs]<LOGIN>\[rs]AppData\[rs]Roaming\[rs]tpnote\[rs]config\[rs]tpnote.toml>\f[R]'
.IP \[bu] 2
macOS: `\f[CR]/Users/<LOGIN>/Library/Application Support/tpnote\f[R]'
.RE
.IP "4." 3
At startup all parent directories of the note file path
`\f[CR]<PATH>\f[R]' are searched for a marker file named
`\f[CR]tpnote.toml\f[R]'.
If found, the document root moves from `\f[CR]/\f[R]' to the found
location.
If present and its content is not empty, Tp\-Note interprets the
file\[cq]s content as configuration file.
.IP "5." 3
The file indicated by the command line parameter
`\f[CR]\-\-config <FIlE>\f[R]'.
.PP
When Tp\-Note starts, it first merges all available configuration files
into the default configuration.
Then the resulting syntax is checked.
If not correct, the last sourced configuration file is renamed (thus
disabled) and Tp\-Note starts with its internal default configuration.
For debugging, you can print out the merged result with
`\f[CR]\-V \-b \-d trace\f[R]'.
.IP
.EX
tpnote \-V \-b \-d trace  \f[B]|\f[R]less
.EE
.PP
To write a custom configuration file, generate a template with
`\f[CR]\-C\f[R]':
.IP
.EX
tpnote \-C \[ti]/.config/tpnote/tpnote.toml
.EE
.PP
The template shows all variables with their defaults values.
When you change a value, do not forget to uncomment the modified line to
activate your change.
Also make sure to keep the `\f[CR]version\f[R]' variable at the
beginning of the file commented out.
As any Tp\-Note upgrade might include a breaking change in the
configuration file structure, try to keep your custom configuration
small.
.PP
Some filename and template related variables are grouped into a
`\f[CR]scheme\f[R]'.
The shipped configuration file lists two schemes: `\f[CR]default\f[R]'
and `\f[CR]zettel\f[R]'.
The scheme used when creating a new note, is selected by the commend
line option `\f[CR]\-\-scheme\f[R]', the environment variable
`\f[CR]TPNOTE_SCHEME\f[R]' or the configuration variable
`\f[CR]arg_default.scheme\f[R]'.
The scheme selected when synchronizing a Tp\-Note header with its
filename depends on the value of the header variable
`\f[CR]scheme:\f[R]' which defaults to `\f[CR]default\f[R]' (cf.
`\f[CR]scheme_sync_default\f[R]').
.PP
Note, that the merging algorithm merges all values, except arrays.
These are usually replaced by the subsequent configuration file.
There is one exception though: top level arrays are also merged.
An example to this is the top level array `\f[CR][[scheme]]\f[R]'.
In the following example we overwrite the variable
`\f[CR]extension_default\f[R]' in the scheme `\f[CR]default\f[R]'.
All other variables remain untouched.
.IP
.EX
\f[B][[scheme]]\f[R]
name=\[dq]default\[dq]
\f[B][scheme.filename]\f[R]
extension_default = \[dq]txt\[dq]
.EE
.PP
When your changes apply to all schemes, the best way is to modify the
base scheme (`\f[CR]base_scheme\f[R]') instead, since all schemes
inherit their (default) values from the base scheme:
.IP
.EX
\f[B][base_scheme.filename]\f[R]
extension_default = \[dq]txt\[dq]
.EE
.PP
Make sure, that your change is not explicitly overwritten in a scheme
definition, as the latter takes precedence.
.PP
To add a custom scheme you must explicitly overwrite all variables that
differ from the base scheme \f[CR]base_scheme\f[R]:
.IP
.EX
\f[B][[scheme]]\f[R]
name=\[dq]my\-custom\-scheme\[dq]
\f[B][scheme.filename]\f[R]
\f[I]# Insert all variables here, that differ from \[ga]base_scheme\[ga].\f[R]
\f[B][scheme.tmpl]\f[R]
\f[I]# Insert all variables here, that differ from \[ga]base_scheme\[ga].\f[R]
.EE
.PP
The following example illustrates how non\-top\-level arrays are
overwritten by the subsequent configuration file.
The default configuration lists about 20 MIME types.
After merging the following example, the configuration lists only the
two MIME types `\f[CR]jpeg\f[R]' and `\f[CR]jpg\f[R]' in
`\f[CR]served_mime_types\f[R]'.
.IP
.EX
\f[B][viewer]\f[R]
served_mime_types = [
    [\[dq]jpeg\[dq], \[dq]image/jpeg\[dq]],
    [\[dq]jpg\[dq], \[dq]image/jpeg\[dq]],
]
.EE
.SS Register your own text editor
There are two ways to modify the default file editor, Tp\-Note launches
when it starts: either you can modify the configuration file variables
`\f[CR]app_args.*.editor\f[R]' and
`\f[CR]app_args.*.editor_console\f[R]', or alternatively, you can set
the `\f[CR]TPNOTE_EDITOR\f[R]' environment variable (cf.\ examples in
the chapter \f[I]ENVIRONMENT_VARIABLES\f[R] below).
.PP
The configuration file variables `\f[CR]app_args.unix.editor\f[R]' and
`\f[CR]app_args.unix.editor_console\f[R]' define lists of external text
editors to be launched for editing.
The lists contain by default well\-known text editor names and their
command line arguments for Unix like operating systems.
For other systems consult: `\f[CR]app_args.windows.editor\f[R]',
`\f[CR]app_args.windows.editor_console\f[R]',
`\f[CR]app_args.macos.editor\f[R]' and
`\f[CR]app_args.macos.editor_console\f[R]'.
Tp\-Note tries to launch every text editor in
`\f[CR]app_args.*.editor\f[R]' from the beginning of the list until it
finds an installed text editor.
When Tp\-Note is started on a Linux console, the list
`\f[CR]app_args.*.editor_console\f[R]' is used instead.
Here you can register text editors that do not require a graphical
environment, e.g.\ `\f[CR]vim\f[R]' or `\f[CR]nano\f[R]'.
In order to use your own text editor, just place it at the top of the
list.
To debug your changes invoke Tp\-Note with
`\f[CR]tpnote \-\-debug debug \-\-popup \-\-edit\f[R]'.
.PP
The following example showcases the configuration for the \f[I]Kate\f[R]
file editor.
The entry `\f[CR]kate\f[R]' launches the binary, while the command line
parameter `\f[CR]\-\-block\f[R]' guarantees, that the launched process
blocks until the user closes the editor.
Tp\-Note detects the end of the process, checks if the title of the note
files has changed in its YAML header and renames the note file if
necessary.
.IP
.EX
\f[B][app_args]\f[R]
unix.editor = [
  [
    \[dq]kate\[dq],
    \[dq]\-\-block\[dq]
  ]
]
.EE
.PP
The equivalent configuration with environment variable:
.IP
.EX
TPNOTE_EDITOR=\[dq]kate \-\-block\[dq] tpnote
.EE
.PP
All items in the above list are subject to limited template expansion
allowing to insert the value of environment variables.
Consider the following example:
.IP
.EX
\f[B][app_args]\f[R]
windows.editor = [
    [
        \[dq]{{get_env(name=\[rs]\[dq]LOCALAPPDATA\[rs]\[dq])}}\[rs]\[rs]Programs\[rs]\[rs]Microsoft VS Code\[rs]\[rs]Code.exe\[dq],
        \[dq]\-n\[dq],
        \[dq]\-w\[dq],
    ]
]
.EE
.PP
When the configuration file is loaded, the above expression
`\f[CR]{{ get_env(name=\[dq]LOCALAPPDATA\[dq]) }}\f[R]' expands under
Windows for a user with the username `\f[CR]Joe\f[R]' to
`\f[CR]C:\[rs]User\[rs]Joe\[rs]AppData\[rs]Local\f[R]' resulting in:
.IP
.EX
\f[B][app_args]\f[R]
windows.editor = [
    [
    \[dq]C:\[rs]\[rs]User\[rs]\[rs]Joe\[rs]\[rs]AppData\[rs]\[rs]Local\[rs]\[rs]Programs\[rs]\[rs]Microsoft VS Code\[rs]\[rs]Code.exe\[dq],
    \[dq]\-\-new\-window\[dq], \[dq]\-\-wait\[dq],
    ]
]
.EE
.PP
In general, when you configure Tp\-Note to work with your text editor,
make sure, that your text editor does not fork!
You can check this by launching the text editor from the command line:
if the command prompt returns immediately, then the file editor forks
the process.
On the other hand everything is OK, when the command prompt only
reappears at the moment the text editor is closed.
Many text editors provide an option to restrain from forking: for
example the \f[I]Visual Studio Code\f[R] file editor can be launched
with the `\f[CR]\-\-wait\f[R]' option, \f[I]Vim\f[R] with
`\f[CR]\-\-nofork\f[R]' or \f[I]Kate\f[R] with `\f[CR]\-\-block\f[R]'.
.PP
However, Tp\-Note also works with forking text editors.
Although this should be avoided, there is a possible workaround.
Observe the following example:
.IP
.EX
$ TPNOTE_EDITOR=\[dq]kate\[dq] tpnote
/home/getreu/20230714\-getreu\-\-Note.md
$ 
.EE
.PP
In the above example Tp\-Note launches the `\f[CR]kate\f[R]' editor in a
forking manner as the command line flag `\f[CR]\-\-block\f[R]' is
missing.
Internally the editor process launching returns immediately, leaving
Tp\-Note without any means to detect when exactly the user closes the
editor.
Hence, Tp\-Note is not able to check if the user has changed the
note\[cq]s header and no filename synchronization can occur afterwards.
.PP
As a workaround, you can manually trigger the filename synchronization
after editing with `\f[CR]tpnote \-\-batch \[dq]$FILE\[dq]\f[R]':
.IP
.EX
FILE=$(tpnote \-\-batch) \f[I]# Create the new note.\f[R]
tpnote \-\-view \[dq]$FILE\[dq]\f[B]&\f[R] \f[I]# Launch Tp\-Note\[aq]s viewer.\f[R]
kate \[dq]$FILE\[dq]           \f[I]# Note, the prompt returns immediatly as the editor forks.\f[R]
                       \f[I]# After closing the editor when editing is done...\f[R]
tpnote \-\-batch \[dq]$FILE\[dq] \f[I]# Synchronize the note\[aq]s filename again.\f[R]
.EE
.PP
Whereby `\f[CR]FILE=$(tpnote \-\-batch)\f[R]' creates the note file,
`\f[CR]kate \[dq]$FILE\[dq]\f[R]' opens the text editor and
`\f[CR]tpnote \-\-batch \[dq]$FILE\[dq]\f[R]' synchronizes the filename
after editing.
.PP
NB: Try to avoid forking at all cost.
As mentioned above, most text editors have a command line flag to
prevent the process from forking:
.IP
.EX
TPNOTE_EDITOR=\[dq]kate \-\-block\[dq] tpnote
.EE
.PP
\f[B]Register a Flatpak Markdown editor\f[R]
.PP
\c
.UR https://www.flathub.org/home
Flathub for Linux
.UE \c
\ is a cross\-platform application repository that works well with
Tp\-Note.
To showcase an example, we will add a Tp\-Note launcher for the
\f[I]Mark Text\f[R] Markdown text editor available as \c
.UR https://www.flathub.org/apps/details/com.github.marktext.marktext
Flatpak package
.UE \c
\&.
Before installing, make sure that you have \c
.UR https://flatpak.org/setup/
set up Flatpack
.UE \c
\ correctly.
Then install the application with:
.IP
.EX
sudo flatpak install flathub com.github.marktext.marktext
.EE
.PP
To test, run \f[I]Mark Text\f[R] from the command line:
.IP
.EX
flatpak run com.github.marktext.marktext
.EE
.PP
Then place a Tp\-Note configuration in its search path (e.g.\ 
`\f[CR]\[ti]/.config/tpnote/tpnote.toml\f[R]') with the following
content:
.IP
.EX
\f[B][app_args]\f[R]
unix.editor = [ [ \[dq]flatpak\[dq], \[dq]run\[dq], \[dq]com.github.marktext.marktext\[dq], ] ]
.EE
.PP
The structure of this variable is a list of lists.
Every item in the outer list corresponds to one entire command line
launching a different text editor, here \f[I]Marktext\f[R].
When launching, Tp\-Note searches through this list until it finds an
installed text editor on the system.
.PP
Save the modified configuration file.
Next time you launch Tp\-Note, the \f[I]Mark Text\f[R]\-editor will
open.
.PP
\f[B]Register a console text editor running in a terminal emulator\f[R]
.PP
In this setup Tp\-Note launches the terminal emulator which is
configured to launch the text editor as child process.
Neither process should fork when they start (see above).
.PP
Here, some examples you can adjust to your needs and taste:
.IP \[bu] 2
\f[I]Neovim\f[R] in \f[I]Xfce4\-Terminal\f[R]:
.RS 2
.IP
.EX
\f[B][app_args]\f[R]
unix.editor = [
  [
    \[dq]xfce4\-terminal\[dq],
    \[dq]\-\-disable\-server\[dq],
    \[dq]\-x\[dq],
    \[dq]nvim\[dq],
    \[dq]+colorscheme pablo\[dq],
    \[dq]+set syntax=markdown\[dq],
  ],
]
.EE
.RE
.IP \[bu] 2
\f[I]Helix\-editor\f[R] in \f[I]XFCE4\-Terminal\f[R]:
.RS 2
.IP
.EX
\f[B][app_args]\f[R]
unix.editor = [
  [
    \[dq]xfce4\-terminal\[dq],
    \[dq]\-\-disable\-server\[dq],
    \[dq]\-x\[dq],
    \[dq]hx\[dq],
  ],
]
.EE
.RE
.IP \[bu] 2
\f[I]Helix\f[R] in \f[I]LXTerminal\f[R]:
.RS 2
.IP
.EX
\f[B][app_args]\f[R]
unix.editor = [
  [
    \[dq]lxterminal\[dq],
    \[dq]\-\-no\-remote\[dq],
    \[dq]\-e\[dq],
    \[dq]hx\[dq],
  ],
]
.EE
.RE
.IP \[bu] 2
\f[I]Helix\f[R] in \f[I]Xterm\f[R]:
.RS 2
.IP
.EX
\f[B][app_args]\f[R]
unix.editor = [
  [
    \[dq]xterm\[dq],
    \[dq]\-fa\[dq],
    \[dq]DejaVu Sans Mono\[dq],
    \[dq]\-fs\[dq],
    \[dq]12\[dq],
    \[dq]\-e\[dq],
    \[dq]hx\[dq],
  ],
]
.EE
.RE
.IP \[bu] 2
\f[I]Helix\f[R] in \f[I]Alacritty\f[R]:
.RS 2
.IP
.EX
\f[B][app_args]\f[R]
unix.editor = [
  [
    \[dq]alacritty\[dq],
    \[dq]\-e\[dq],
    \[dq]hx\[dq],
  ],
]
.EE
.RE
.IP \[bu] 2
Flatpack Helix in XFCE4 terminal
.RS 2
.IP
.EX
\f[B][app_args]\f[R]
unix.editor = [
  [
    \[dq]xfce4\-terminal\[dq], \[dq]\-\-disable\-server\[dq], \[dq]\-x\[dq],
    \[dq]flatpak\[dq], \[dq]run\[dq], \[dq]com.helix_editor.Helix\[dq],
  ],
]

unix.editor_console = [
  [
    \[dq]flatpak\[dq], \[dq]run\[dq], \[dq]com.helix_editor.Helix\[dq]
  ],
]
.EE
.RE
.SS Change the file extension for new note files
Tp\-Note identifies the note\[cq]s markup language by its file extension
and renders the content accordingly (see
`\f[CR]filename.extensions\f[R]' variable).
For example: the variable `\f[CR]filename.extensions\f[R]' lists some
extensions, that are regarded as Markdown files:
.IP
.EX
\f[B][[scheme]]\f[R]
name = \[dq]default\[dq]
\f[B][scheme.filename]\f[R]
extensions = [
  [\[dq]txt\[dq], \[dq]ToMarkdown\[dq], \[dq]Markdown\[dq]],
  [\[dq]md\[dq], \[dq]ToMarkdown\[dq], \[dq]Markdown\[dq]],
  [\[dq]rst\[dq], \[dq]Disabled\[dq], \[dq]ReStructuredText\[dq]],
  [\[dq]htmlnote\[dq], \[dq]PassThrough\[dq], \[dq]Html\[dq]],
  [\[dq]txtnote\[dq], \[dq]Disabled\[dq], \[dq]PlainText\[dq]],
  [\[dq]adoc\[dq], \[dq]Disabled\[dq], \[dq]PlainText\[dq]],
  [\[dq]text\[dq], \[dq]ToMarkdown\[dq], \[dq]Markdown\[dq]],
  [\[dq]markdn\[dq], \[dq]ToMarkdown\[dq], \[dq]Markdown\[dq]],
  [\[dq]markdown\[dq], \[dq]ToMarkdown\[dq], \[dq]Markdown\[dq]],
]
.EE
.PP
The default file extension for new note files is defined as:
.IP
.EX
\f[B][base_scheme.filename]\f[R]
extension_default = \[dq]md\[dq]
.EE
.PP
If you prefer rather the file extension `\f[CR].markdown\f[R]' for new
notes, write a configuration file with:
.IP
.EX
\f[B][base_scheme.filename]\f[R]
extension_default = \[dq]markdown\[dq]
.EE
.PP
This modification does not change how the note file\[cq]s content is
interpreted \- in this case as Markdown \- because both file extensions
`\f[CR].md\f[R]' and `\f[CR].markdown\f[R]' are rendered as
`\f[CR]Markdown\f[R]' according to `\f[CR]filename.extensions\f[R]'.
.SS Configure the natural language detection algorithm
When creating a new header for a new or an existing note file, a
linguistic language detection algorithm tries to determine in what
natural language the note file is authored.
Depending on the context, the algorithm processes as input: the header
field `\f[CR]title:\f[R]' or the first sentence of the text body.
The natural language detection algorithm is implemented as a template
filter named `\f[CR]get_lang\f[R]', which is used in various Tera
content templates `\f[CR]tmpl.*_content\f[R]' in Tp\-Note\[cq]s
configuration file.
The filter `\f[CR]get_lang\f[R]' is parametrized by the configuration
variables `\f[CR]tmpl.filter.get_lang.*\f[R]' containing e.g.\ a list of
ISO 639\-1 encoded languages, the algorithm considers as potential
detection candidates, e.g.:
.IP
.EX
\f[B][base_scheme.tmpl]\f[R]
filter.get_lang.language_candidates = [ \[dq]en\[dq], \[dq]fr\[dq], \[dq]de\[dq], \[dq]et\[dq] ]
.EE
.PP
As natural language detection is CPU intensive, it is advised to limit
the number of detection candidates to 5 or 6, depending on how fast your
computer is.
The more language candidates you include, the longer the note file
creation takes time.
As a rule of thumb, with all languages enabled the creation of new notes
can take up to 4 seconds on my computer.
Nevertheless, it is possible to enable all available detection
candidates with the empty array:
.IP
.EX
\f[B][base_scheme.tmpl]\f[R]
filter.get_lang.language_candidates = []
.EE
.PP
If the input text is usually written in one language only, set:
.IP
.EX
\f[B][base_scheme.tmpl]\f[R]
filter.get_lang.mode = \[dq]Monolingual\[dq]
.EE
.PP
The algorithm can also search for multiple languages in the input text:
.IP
.EX
\f[B][base_scheme.tmpl]\f[R]
filter.get_lang.mode = \[dq]Multilingual\[dq]
.EE
.PP
The language detection algorithm can be fine\-tuned with:
.IP
.EX
\f[B][base_scheme.tmpl]\f[R]
filter.get_lang.minimum_relative_distance = 0.3
filter.get_lang.consecutive_words_min  = 7
filter.get_lang.words_total_percentage_min = 10
.EE
.PP
The above parameters can reduce false positives when determining the
natural language with the `\f[CR]get_lang\f[R]' filter.
Setting them to 0 finds more languages, but leads to more false
positives.
A higher value enforces criteria to ignore some words when guessing the
languages.
The `\f[CR]minimum_relative_distance\f[R]' excludes words that appear in
more than one language.
Valid values are between `\f[CR]0.0\f[R]' and `\f[CR]0.99\f[R]'.
`\f[CR]consecutive_words_min\f[R]' sets the minimum of consecutive words
in one language to be considered.
`\f[CR]words_total_percentage_min\f[R]' set the minimum word count ratio
in percent a language must appear in the input text to be reported.
.PP
Once the language is detected with the `\f[CR]get_lang\f[R]' filter, it
passes another filter called `\f[CR]map_lang\f[R]'.
This filter maps the result of `\f[CR]get_lang\f[R]' \- encoded as ISO
639\-1 codes \- to IETF language tags.
For example, `\f[CR]en\f[R]' is replaced with `\f[CR]en\-US\f[R]' or
`\f[CR]de\f[R]' with `\f[CR]de\-DE\f[R]'.
This additional filtering is useful, because the detection algorithm can
not figure out the region code (e.g.\ \f[CR]\-US\f[R] or
\f[CR]\-DE\f[R]) by itself.
Instead, the region code is appended in a separate processing step.
Spell checker or grammar checker like [LTeX] rely on this region
information, to work properly.
.PP
The corresponding configuration looks like this:
.IP
.EX
\f[B][base_scheme.tmpl]\f[R]
filter.get_lang.language_candidates = [ \[dq]en\[dq], \[dq]fr\[dq], \[dq]de\[dq], \[dq]et\[dq] ]
filter.map_lang = [
    [ \[dq]en\[dq], \[dq]en\-US\[dq], ],
    [ \[dq]de\[dq], \[dq]de\-DE\[dq], ],
]
.EE
.PP
When the user\[cq]s region setting \- as reported from the operating
system\[cq]s locale setting \- does not exist in above list, it is
automatically appended as additional internal mapping.
When the filter \f[CR]map_lang\f[R] encounters a language code for which
no mapping is configured, the input language code is forwarded as it is
without modification, e.g.\ the input \f[CR]fr\f[R] results in the
output \f[CR]fr\f[R].
Subsequent entries that differ only in the region subtag, e.g.
`\f[CR][\[aq]en\[aq], \[aq]en\- GB\[aq]], [\[aq]en\[aq], \[aq]en\-US\[aq]]\f[R]'
are ignored.
.PP
Note, that the environment variable `\f[CR]TPNOTE_LANG_DETECTION\f[R]'
\- if set \- takes precedence over the
`\f[CR]tmpl.filter.get_lang.language_candidates\f[R]' and
`\f[CR]tmpl.filter.map_lang\f[R]' settings.
This allows configuring the language detection feature system\-wide
without touching Tp\-Note\[cq]s configuration file.
The following example achieves the equivalent result to the
configuration hereinabove:
.IP
.EX
TPNOTE_LANG_DETECTION=\[dq]en\-US, fr, de\-DE, et\[dq] tpnote
.EE
.PP
If you want to enable all language detection candidates, add the pseudo
tag `\f[CR]+all\f[R]' somewhere to the list:
.IP
.EX
TPNOTE_LANG_DETECTION=\[dq]en\-US, de\-DE, +all\[dq] tpnote
.EE
.PP
In the above example the IETF language tags `\f[CR]en\-US\f[R]' and
`\f[CR]de\-DE\f[R]' are retained in order to configure the region codes
`\f[CR]US\f[R]' and `\f[CR]DE\f[R]' used by the `\f[CR]map_lang\f[R]'
template filter.
.PP
For debugging observe the value of `\f[CR]SETTINGS\f[R]' in the debug
log with:
.IP
.EX
tpnote \-d trace \-b
.EE
.PP
If wished for, you can disable Tp\-Note\[cq]s language detection
feature:
.IP
.EX
\f[B][base_scheme.tmpl]\f[R]
filter.get_lang.mode = \[dq]Disabled\[dq]
.EE
.PP
Like above, you can achieve the same with:
.IP
.EX
TPNOTE_LANG_DETECTION=\[dq]\[dq] tpnote
.EE
.SS Localize the note\[cq]s front matter
Be default, the front matter variable names are printed in English when
creating new note files from templates.
For example the header variable `\f[CR]fm.fm_subtitle\f[R]' is displayed
as `\f[CR]subtitle:\f[R]' in the note\[cq]s header.
.PP
This translation relation is defined in the configuration file variable
`\f[CR]scheme.tmpl.fm_var.localization\f[R]'.
Consider the following simplified example:
.IP
.EX
\f[B][base_scheme.tmpl]\f[R]
fm_var.localization = [
    [\[dq]fm_title\[dq], \[dq]title\[dq]],
    [\[dq]fm_subtitle\[dq], \[dq]subtitle\[dq]],
    [\[dq]fm_author\[dq], \[dq]author\[dq]],
    [\[dq]fm_date\[dq], \[dq]date\[dq]],
    [\[dq]fm_lang\[dq], \[dq]lang\[dq]],
    [\[dq]fm_languages\[dq], \[dq]languages\[dq]],
    [\[dq]fm_sort_tag\[dq], \[dq]sort_tag\[dq]],
    [\[dq]fm_file_ext\[dq], \[dq]file_ext\[dq]],
    [\[dq]fm_no_filename_sync\[dq], \[dq]no_filename_sync\[dq]],
    [\[dq]fm_filename_sync\[dq], \[dq]filename_sync\[dq]],
    [\[dq]fm_scheme\[dq], \[dq]scheme\[dq]],
]
.EE
.PP
To change the natural language of the displayed header variable names,
modify the second column of the above table.
For example:
.IP
.EX
\f[B][base_scheme.tmpl]\f[R]
fm_var.localization = [
    [\[dq]fm_title\[dq], \[dq]Titel\[dq]],
    [\[dq]fm_subtitle\[dq], \[dq]Untertitel\[dq]],
    [\[dq]fm_author\[dq], \[dq]Autor\[dq]],
    [\[dq]fm_date\[dq], \[dq]Datum\[dq]],
    [\[dq]fm_lang\[dq], \[dq]Sprache\[dq]],
    [\[dq]fm_languages\[dq], \[dq]Sprachen\[dq]],
    [\[dq]fm_sort_tag\[dq], \[dq]Kennzeichen\[dq]],
    [\[dq]fm_file_ext\[dq], \[dq]Dateierweiterung\[dq]],
    [\[dq]fm_no_filename_sync\[dq], \[dq]Keine_Sync\[dq]],
    [\[dq]fm_filename_sync\[dq], \[dq]Dateinamensync\[dq]],
    [\[dq]fm_scheme\[dq], \[dq]Schema\[dq]],
]
.EE
.PP
Keep in mind, that the templates do not change!
Header variables in templates always start with the identifier
`\f[CR]fm.fm_\f[R]' (cf.\ first column of the above table).
.PP
The above configuration changes the localization default for all note
files in the scope of the configuration file `\f[CR]tpnote.toml\f[R]'.
It is also possible to use header variables in different languages side
by side with schemes:
.IP
.EX
\f[B][[scheme]]\f[R]
name = \[aq]Deutsch\[aq]
\f[B][scheme.tmpl]\f[R]
fm_var.localization = [
    [\[dq]fm_title\[dq], \[dq]Titel\[dq]],
    [\[dq]fm_subtitle\[dq], \[dq]Untertitel\[dq]],
    [\[dq]fm_author\[dq], \[dq]Autor\[dq]],
    [\[dq]fm_date\[dq], \[dq]Datum\[dq]],
    [\[dq]fm_lang\[dq], \[dq]Sprache\[dq]],
    [\[dq]fm_languages\[dq], \[dq]Sprachen\[dq]],
    [\[dq]fm_sort_tag\[dq], \[dq]Kennzeichen\[dq]],
    [\[dq]fm_file_ext\[dq], \[dq]Dateierweiterung\[dq]],
    [\[dq]fm_no_filename_sync\[dq], \[dq]Keine_Sync\[dq]],
    [\[dq]fm_filename_sync\[dq], \[dq]Dateinamensync\[dq]],
    [\[dq]fm_scheme\[dq], \[dq]Schema\[dq]],
]
.EE
.PP
This example defines an additional scheme called \[lq]Deutsch\[rq].
To use the new scheme invoke Tp\-Note with
`\f[CR]tpnote \-\-scheme Deutsch\f[R]'.
It creates the following note file:
.IP
.EX
\-\-\-
Titel\f[B]:\f[R]        getreu
Untertitel\f[B]:\f[R]   Note
Autor\f[B]:\f[R]        Getreu
Datum\f[B]:\f[R]        2025\-04\-23
Sprache\f[B]:\f[R]      de\-DE
Schema\f[B]:\f[R]       Deutsch
\-\-\-
.EE
.PP
When you later reopen the note file with
`\f[CR]tpnote 20250423\-getreu\-\-Note.md\f[R]', Tp\-Note determines
with the line `\f[CR]Schema: Deutsch\f[R]' its scheme
`\f[CR]Deutsch\f[R]'.
With the help of the associated localization table above, Tp\-Note
translates the keys back to the English `\f[CR]fm.fm_*\f[R]' versions.
.PP
Note, that the (de\-)localization only applies to root level keys (e.g.
`\f[CR]fm_foo\f[R]' in `\f[CR]fm.fm_foo\f[R]').
All nested keys names (e.g.\ `\f[CR]baz\f[R]' in
`\f[CR]fm.fm_foo.baz\f[R]') are never translated.
.SS Change the default markup language
Tp\-Note\[cq]s core functionality, the management of note file headers
and filenames, is markup language agnostic.
However, among the shipped templates, there is one content template
`\f[CR]tmpl.annotate_file_content\f[R]' that generates a hyperlink.
As the hyperlink syntax varies depending on the markup language,
Tp\-Note\[cq]s default internal `\f[CR]tmpl.annotate_file_content\f[R]'
template, handle \[lq]Markdown\[rq] and \[lq]ReStructuredText\[rq]
syntax.
If you wish to switch the default markup language with
`\f[CR]filename.extension_default\f[R]' to another language than
`\f[CR]md\f[R]' or `\f[CR]rst\f[R]', you should not forget to modify the
`\f[CR]tmpl.annotate_file_content\f[R]' content template as well.
.PP
Tp\-Note\[cq]s built\-in viewer is not markup language agnostic.
It comprises three different markup renderers (cf.\ section
\f[I]Customize the built\-in note viewer\f[R]):
.IP \[bu] 2
\f[I]Markdown\f[R] (file extension \f[CR].md\f[R])
.IP \[bu] 2
\f[I]ReStructuredText\f[R] (file extension \f[CR].rst\f[R]) and
.IP \[bu] 2
\f[I]PlainText\f[R] (Link only renderer, file extension
\f[CR].txtnote\f[R])
.SS Change the default markup language to ReStructuredText
Tp\-Note\[cq]s core function is a template system and as such it depends
very little on the used markup language.
The default templates are designed in a way that they contain almost no
markup specific code.
Though there is one little exception in the
`\f[CR]annotate_file_content\f[R]' template (see previous section).
.PP
When you open an existing note file, Tp\-Note detects the note
file\[cq]s markup language from its file extension.
To open a note written in ReStructuredText just type:
.IP
.EX
tpnote mynote.rst
.EE
.PP
To create a new ReStructuredText note invoke Tp\-Note with:
.IP
.EX
TPNOTE_EXTENSION_DEFAULT=rst tpnote
.EE
.PP
You can change the Markup language of a specific note file by adding the
variable `\f[CR]file_ext:\f[R]' to its YAML header.
For example, for ReStructuredText add:
.IP
.EX
\-\-\-
title\f[B]:\f[R]    some note
file_ext\f[B]:\f[R] rst
\-\-\-
.EE
.PP
To make ReStructuredText the default markup language for all future new
notes, write a configuration file
`\f[CR]\[ti]/.config/tpnote/tpnote.toml\f[R]' with the following
content:
.IP
.EX
\f[B][base_scheme.filename]\f[R]
extension_default=\[dq]rst\[dq]
.EE
.PP
Or, if you wish to apply the change only to notes created with the
`\f[CR]zettel\f[R]' scheme set:
.IP
.EX
\f[B][[scheme]]\f[R]
name = \[aq]zettel\[aq]
\f[B][scheme.filename]\f[R]
extension_default=\[dq]rst\[dq]
.EE
.PP
The latter overwrites the `\f[CR]extension_default\f[R]' variable of the
`\f[CR]zettel\f[R]' scheme, but leaves the `\f[CR]default\f[R]' scheme
untouched.
.SS Change the sort tag character set
\f[I]Sort\-tags\f[R] for new notes are generated with the
`\f[CR]tmpl.*_filename\f[R]' templates.
Before changing the sort\-tag generation scheme in these templates, make
sure to enable the right set of potential sort\-tag characters.
.PP
In the default scheme, the digits `\f[CR]0\f[R]'\-`\f[CR]9\f[R]', all
lower case letters and the characters `\f[CR]_\f[R]', `\f[CR]\-\f[R]',
`\f[CR].\f[R]' are recognized as being part of a \f[I]sort tag\f[R] when
they appear at the beginning of a filename.
This set of characters can be modified with the
`\f[CR]filename.sort_tag.extra_chars\f[R]' configuration variable.
If defined, the `\f[CR]filename.sort_tag.separator\f[R]' (by default
`\f[CR]\-\f[R]') marks the end of a sort tag without being part of it.
In addition, one special character
`\f[CR]filename.sort_tag.extra_separator\f[R]' (by default
`\f[CR]\[aq]\f[R]') might be inserted by the filename template directly
after the `\f[CR]\-\f[R]' to avoid ambiguity.
.SS Customize the filename synchronization scheme
The filename synchronization scheme is fully customizable through
\f[I]Tp\-Note\[cq]s filename templates\f[R].
To design such a custom scheme, start to set up your synchronization
rules in the `\f[CR]tmpl.sync_filename\f[R]' template.
Then adjust all `\f[CR]tmpl.*_filename\f[R]' templates to comply with
these rules.
In order to verify your design, check that the following holds for any
sequential application of one `\f[CR]tmpl.*_filename\f[R]' template
followed directly by the `\f[CR]tmpl.sync_filename\f[R]' template: The
latter should never change the filename initially set up by any
`\f[CR]tmpl.*_filename\f[R]' template.
.PP
Secondly, make sure that in filename templates
`\f[CR]tmpl.*_filename\f[R]', sort\-tags
`\f[CR]{{ path | file_sort_tag }}\f[R]' are never inserted directly.
Instead, prepend the \f[I]sort_tag\f[R] with
`\f[CR]prepend(with_sort_tag=path|file_sort_tag)\f[R]' to the following
expression, e.g.:
.IP
.EX
{{ fm.fm_title | sanit | prepend(with_sort_tag=path|file_sort_tag) }}
.EE
.PP
The filter `\f[CR]prepend(with_sort_tag=<...>)\f[R]' decides whether to
insert the `\f[CR]sort_tag.separator=\[dq]\-\[dq]\f[R]' and/or the
`\f[CR]sort_tag.extra_separator=\[dq]\[aq]\[dq]\f[R]' characters.
These heuristics enable Tp\-Note to identify unequivocally sort\-tags in
filenames, which avoids potential cyclic filename change.
Or, in other words: the `\f[CR]tmpl.sync_filname\f[R]' template must
always give the same result, even after repeated application.
.PP
To debug your `\f[CR]tmpl.sync_filename\f[R]' template, create a test
note file `\f[CR]test.md\f[R]' and invoke Tp\-Note with
`\f[CR]\-\-debug trace\f[R]' and `\f[CR]\-\-batch\f[R]':
.IP
.EX
tpnote \-\-batch \-\-debug trace test.md
.EE
.SS Store new note files by default in a subdirectory
When you are annotating an existing file on disk, the new note file is
placed in the same directory by default.
To configure Tp\-Note to store the new note file in a subdirectory,
let\[cq]s say `\f[CR]Notes/\f[R]', instead, you need to modify the
templates `\f[CR]scheme.tmpl.annotate_file_filename\f[R]' and
`\f[CR]scheme.tmpl.annotate_file_content\f[R]':
.PP
First, create a configuration file
`\f[CR]\[ti]/.config/tpnote/tpnote.toml\f[R]' with:
.IP
.EX
\f[B][base_scheme.tmpl]\f[R]
annotate_file_content = \[dq]\[dq]\[dq]
COMPLETE HERE
\[dq]\[dq]\[dq]

annotate_file_filename = \[dq]\[dq]\[dq]
COMPLETE HERE
\[dq]\[dq]\[dq]
.EE
.PP
In the above replace the string `\f[CR]COMPLETE HERE\f[R]' with the
default values for the variables you obtain with
`\f[CR]tpnote \-C \- | less\f[R]'.
.PP
Then, replace in `\f[CR]annotate_file_filename\f[R]' the string:
.IP
.EX
{{ fm.fm_title | sanit | prepend(with_sort_tag=tag) }}\[rs]
.EE
.PP
with:
.IP
.EX
Notes/{{ fm.fm_title | sanit | prepend(with_sort_tag=tag) }}\[rs]
.EE
.PP
and in `\f[CR]annotate_file_content\f[R]':
.IP
.EX
[{{ path | file_name }}](<{{ path | file_name }}>)
.EE
.PP
with:
.IP
.EX
[{{ path | file_name }}](<../{{ path | file_name }}>)
.EE
.PP
The scheme `\f[CR]zettel\f[R]' overwrites the base
`\f[CR]annotate_file_filename\f[R]' template.
Therefore, in case you use the `\f[CR]zettel\f[R]' scheme as well,
repeat the above section and append the following to your configuration
file and repeat the above.
.IP
.EX
\f[B][[scheme]]\f[R]
name = \[aq]zettel\[aq]
\f[B][scheme.tmpl]\f[R]
annotate_file_content = \[dq]\[dq]\[dq]
COMPLETE HERE
\[dq]\[dq]\[dq]

annotate_file_filename = \[dq]\[dq]\[dq]
COMPLETE HERE
\[dq]\[dq]\[dq]
.EE
.PP
To test your configuration, place a `\f[CR]test.pdf\f[R]' file in the
current directory and annotate that file with:
.IP
.EX
tpnote test.pdf
.EE
.PP
This should create a new note file
`\f[CR]./Notes/test.pdf\-\-Note.md\f[R] and open your web browser with a
link to'\f[CR]test.pdf\f[R]`.
Clicking on that link, the PDF page should be shown.
The default behaviour, without this customization, is to create the new
note file'\f[CR]./test.pdf\-\-Note.md\f[R]\[cq] in the current
directory.
.PP
To test the `\f[CR]zettel\f[R]' scheme configuration invoke Tp\-Note
with:
.IP
.EX
tpnote \-s zettel test.pdf
.EE
.SS Customize the built\-in note viewer
.SS Change the way how note files are rendered for viewing
Currently, three markup renderers are available: `\f[CR]Markdown\f[R]',
`\f[CR]ReStructuredText\f[R]' and `\f[CR]PlainText\f[R]'.
The configuration file variable `\f[CR]filename.extensions\f[R]'
associates several note file extensions with one of these markup
renderers.
In case none of them suit you, it is possible to disable the viewer
feature selectively for one particular note file extension by
associating it with the pseudo `\f[CR]RendererDisabled\f[R]' renderer.
If you wish to disable the viewer feature overall (for all file
extensions), set the variable `\f[CR]arg_default.edit = true\f[R]'.
.SS Delay the launch of the web browser
By default, Tp\-Note launches two external programs: some text editor
and a web browser.
If wished for, the configuration variable
`\f[CR]viewer.startup_delay\f[R]' allows delaying the launch of the web
browser some milliseconds.
This way the web browser window will always appear on top of the editor
window.
A negative value delays the start of the text editor instead.
.SS Change the HTML rendition template
After the markup rendition process, Tp\-Note\[cq]s built\-in viewer
generates its final HTML rendition through the customizable HTML
templates `\f[CR]tmpl_html.viewer\f[R]',
`\f[CR]tmpl_html.viewer_error\f[R]' and `\f[CR]tmpl_html.exporter\f[R]'.
Unlike content templates and filename templates, all HTML templates
escape HTML critical characters in variables by default.
To disable escaping for a specific variable, add the `\f[CR]safe\f[R]'
filter in last position of the filter chain.
Please note, that in general, the `\f[CR]safe\f[R]' filter is only
recommended directly after the `\f[CR]to_html\f[R]' and the
`\f[CR]markup_to_html\f[R]' filters, because these handle critical input
by themselves.
The following simplified code sample, inspired by the
`\f[CR]tmpl_html.viewer\f[R]' template, illustrates the available
variables:
.IP
.EX
\f[B][tmpl_html]\f[R]
viewer = \[aq]\[aq]\[aq]
{%\- set ext = fm.fm_file_ext | default(value=extension_default ) \-%}
<!DOCTYPE html>
<html lang=\[dq]{{ fm.fm_lang | default(value=\[aq]en\[aq]) }}\[dq]>
<head>
<meta charset=\[dq]utf\-8\[dq]>
<title>{{ fm.fm_title }}</title>
<link rel=\[dq]stylesheet\[dq] href=\[dq]{{ viewer_doc_css_path }}\[dq]>
<link rel=\[dq]stylesheet\[dq] href=\[dq]{{ viewer_highlighting_css_path }}\[dq]>
  </head>
  <body>
  <pre class=\[dq]doc\-header\[dq]>{{ doc_fm_text }}</pre>
  <hr>
  <div class=\[dq]doc\-body\[dq]>
    {{ doc.body | markup_to_html(extension=ext) | safe }}
  </div>
  <script>{{ viewer_doc_js | safe }}</script>
</body>
</html>
\[aq]\[aq]\[aq]
.EE
.PP
Specifically:
.IP \[bu] 2
`\f[CR]{{ fm.fm_* }}\f[R]' are the deserialized header variables.
Note, that the header variables may be localized,
e.g.\ `\f[CR]Untertitel\f[R]'.
Nevertheless, in templates always use the English version,
e.g.\ `\f[CR]fm.fm_subtitle\f[R]'.
All content template variables and filters are available.
See section \f[I]Template variables\f[R] above.
.IP \[bu] 2
`\f[CR]{{ viewer_doc_css_path }}\f[R]' is the CSS stylesheet path
required to format an HTML rendition of a Tp\-Note document.
This path is an internal constant and understood by Tp\-Note\[cq]s
internal web server.
.IP \[bu] 2
`\f[CR]{{ viewer_highlighting_css_path }}\f[R]' is the CSS stylesheet
path required to highlight embedded source code.
This path is an internal constant and it is understood by Tp\-Note\[cq]s
internal web server.
.IP \[bu] 2
`\f[CR]{{ doc.header }}\f[R]' is the raw UTF\-8 copy of the header.
Not to be confounded with the dictionary variable `\f[CR]{{ fm }}\f[R]'.
.IP \[bu] 2
`\f[CR]{{ doc.body | markup_to_html(extension=ext) | safe }}\f[R]' is
the note\[cq]s body as HTML rendition.
The parameter `\f[CR]extension\f[R]' designates the markup language as
specified in the `\f[CR]filename.extensions\-*\f[R]' variables.
.IP \[bu] 2
`\f[CR]{{ viewer_doc_js | safe }}\f[R]' is the JavaScript browser code
for live updates.
.IP \[bu] 2
`\f[CR]{{ extension_default }}\f[R]' (c.f.
section \f[I]Template variables\f[R]).
.IP \[bu] 2
`\f[CR]{{ username }}\f[R]' (c.f.
section \f[I]Template variables\f[R]).
.IP \[bu] 2
`\f[CR]{{ lang }}\f[R]' (c.f.
section \f[I]Template variables\f[R]).
.IP \[bu] 2
`\f[CR]{{ my_val | to_html | safe }}\f[R]' is the HTML rendition of the
`\f[CR]my_val\f[R]' variable (c.f.
section \f[I]Template filter\f[R]).
.IP \[bu] 2
`\f[CR]{{\[aq]fm.fm_title\[aq] | name}}\f[R]' prints the localized name
of the `\f[CR]fm.fm_title\f[R]' variable, e.g.\ `\f[CR]title\f[R]' in
English or `\f[CR]Titel\f[R]' in German.
.PP
Alternatively, the header enclosed by `\f[CR]<pre>...</pre>\f[R]' can
also be rendered as a table:
.IP
.EX
  <\f[B]table\f[R] class=\[dq]fm\[dq]>
    <\f[B]tr\f[R]>
    <\f[B]th\f[R] class=\[dq]fmkey\[dq]>{{\[aq]fm.fm_title\[aq] | name}}:</\f[B]th\f[R]>
    <\f[B]th\f[R] class=\[dq]fmval\[dq]><\f[B]b\f[R]>
        {{ fm.fm_title| default(value=\[aq]\[aq]) | to_html | safe }}</\f[B]b\f[R]>
    </\f[B]th\f[R]>
  </\f[B]tr\f[R]>
    <\f[B]tr\f[R]>
    <\f[B]th\f[R] class=\[dq]fmkey\[dq]>{{\[aq]fm.fm_subtitle\[aq] | name}}:</\f[B]th\f[R]>
    <\f[B]th\f[R] class=\[dq]fmval\[dq]>
        {{ fm.fm_subtitle | default(value=\[aq]\[aq]) | to_html | safe }}
    </\f[B]th\f[R]>
  </\f[B]tr\f[R]>
  {% for k, v in fm | remove(key=\[aq]fm_title\[aq])|
                      remove(key=\[aq]fm_subtitle\[aq])|
  %}
    <\f[B]tr\f[R]>
    <\f[B]th\f[R] class=\[dq]fmkeygrey\[dq]>{{ k | name }}:</\f[B]th\f[R]>
    <\f[B]th\f[R] class=\[dq]fmvalgrey\[dq]>{{ v | to_html | safe }}</\f[B]th\f[R]>
  </\f[B]tr\f[R]>
  {% endfor %}
  </\f[B]table\f[R]>
.EE
.PP
The error page template `\f[CR]tmpl_html.viewer_error\f[R]' (see below)
does not provide `\f[CR]fm.fm_*\f[R]' variables, because of possible
header syntax errors.
Instead, the variable `\f[CR]{{ doc_error }}\f[R]' contains the error
message as raw UTF\-8 and the variable
`\f[CR]{{ doc_text | markup_to_html | safe }}\f[R]' the HTML rendition
of the text source with clickable hyperlinks:
.IP
.EX
\f[B][tmpl_html]\f[R]
viewer_error = \[aq]\[aq]\[aq]
<!DOCTYPE html>
<html lang=\[rs]\[dq]en\[rs]\[dq]>
<head>
<meta charset=\[rs]\[dq]UTF\-8\[rs]\[dq]>
<title>Syntax error</title>
</head>
<body>
<h3>Syntax error</h3>
<p> in note file: <pre>{{ path }}</pre><p>
<div class=\[rs]\[dq]note\-error\[rs]\[dq]>
<hr>
<pre>{{ doc_error }}</pre>
<hr>
</div>
{{ doc_text | markup_to_html | safe }}
<script>{{ viewer_doc_js | safe }}</script>
</body>
</html>
\[aq]\[aq]\[aq]
.EE
.SS Customize the built\-in HTML exporter
Customizing Tp\-Note\[cq]s HTML export function works the same way as
customizing the built\-in viewer.
There are some slight differences though: The role of the
`\f[CR]tmpl_html.viewer\f[R]' template \- discussed above \- is taken
over by the `\f[CR]tmpl_html.exporter\f[R]' template:
.IP
.EX
\f[B][tmpl_html]\f[R]
exporter = \[aq]\[aq]\[aq]
{%\- set ext = fm.fm_file_ext | default(value=extension_default ) \-%}
<!DOCTYPE html>
<html lang=\[dq]{{ fm.fm_lang | default(value=\[aq]en\[aq]) }}\[dq]>
<head>
<meta charset=\[dq]utf\-8\[dq]>
<title>{{ fm.fm_title }}</title>
<style>
{{ exporter_doc_css | safe }}
{{ exporter_highlighting_css | safe }}
</style>
</head>
<body>
  <pre class=\[dq]doc\-header\[dq]>{{ doc_fm_text }}</pre>
  <hr>
  <div class=\[dq]doc\-body\[dq]>
    {{ doc.body | markup_to_html(extension=ext) | safe }}
  </div>
</body>
</html>
\[aq]\[aq]\[aq]
.EE
.PP
In this template the same \f[I]Tera\f[R] variables as in
`\f[CR]tmpl_html.viewer\f[R]' are available, with one exception
`\f[CR]{{ note_js }}\f[R]', which does not make sense in this context.
As the exporter prints possible rendition error messages on the console,
there is no equivalent to the `\f[CR]tmpl_html.viewer_error\f[R]'
template.
Note, in contrast to the previous `\f[CR]tmpl_html.viewer\f[R]' example,
the source code highlighting CSS code is now embedded into the HTML
output with:
.IP
.EX
<\f[B]style\f[R]>
{{ exporter_doc_css | safe }}
{{ exporter_highlighting_css | safe }}
</\f[B]style\f[R]>
.EE
.PP
Note, the `\f[CR]safe\f[R]' filter disables the escaping of critical
characters in the CSS input.
We have no security concerns in this context, because we have full
control over the CCS input coming from the configuration file variables
`\f[CR]tmpl_html.exporter_doc_css\f[R]' and
`\f[CR]tmpl_html.exporter_highlighting_theme\f[R]'.
.SS Choose your favourite web browser as note viewer
Once the note is rendered into HTML, Tp\-Note\[cq]s internal HTTP server
connects to a random port at the `\f[CR]localhost\f[R]' interface where
the rendition is served to be viewed with a web browser.
Tp\-Note\[cq]s configuration file contains a list
`\f[CR]app_args.unix.browser\f[R]' with common web browsers and their
usual location on Unix like operating systems.
For other systems consult `\f[CR]app_args.windows.browser\f[R]' and
`\f[CR]app_args.macos.browser\f[R]'.
This list is executed top down until a web browser is found and
launched.
If you want to view your notes with a different web browser, simply
overwrite the internal `\f[CR]app_args.unix.browser\f[R]' list and put
your favourite web browser on top.
.IP
.EX
\f[B][app_args]\f[R]
unix.browser = [[ \[dq]chromium\[dq], \[dq]\-\-new\-window\[dq], \[dq]\-\-incognito\[dq]]]
.EE
.PP
Alternatively, you can set the `\f[CR]TPNOTE_BROWSER\f[R]' environment
variable (cf.
examples in the chapter \f[I]ENVIRONMENT_VARIABLES\f[R] below).
.PP
In case none of the listed browsers can be found, Tp\-Note switches into
a fallback mode with limited functionality, where it tries to open the
system\[cq]s default web browser.
A disadvantage is, that in fall back mode Tp\-Note is not able to detect
when the user closes the web browser.
This might lead to situations, where Tp\-Note\[cq]s internal HTTP server
shuts down too early.
In order to check if Tp\-Note finds the selected web browser as
intended, invoke Tp\-Note with
`\f[CR]tpnote \-\-debug debug \-\-popup \-\-view\f[R]'.
.SH TEMPLATES
All \f[I]TP\-Note\f[R]\[cq]s workflows are customizable through its
templates which are grouped in the `\f[CR][scheme.tmpl]\f[R]' and in the
`\f[CR][scheme.tmpl_html]\f[R]' section of Tp\-Note\[cq]s configuration
file.
This chapter deals with `\f[CR][scheme.tmpl]\f[R]' templates which are
responsible for generating Tp\-Note files.
`\f[CR][scheme.tmpl_html]\f[R]' templates concern only Tp\-Note\[cq]s
viewer feature and are discussed in the chapters: Customize the
built\-in note viewer_ and \f[I]Choose your favourite web browser as
note viewer\f[R].
.PP
Tp\-Note captures and stores its environment in \f[I]Tera
variables\f[R].
For example, the variable `\f[CR]{{ dir_path }}\f[R]' is initialized
with the note\[cq]s target directory.
The variable `\f[CR]{{ clipboard }}\f[R]' contains the content of the
clipboard.
To learn more about Tera variables, launch Tp\-Note with the
`\f[CR]\-\-debug trace\f[R]' option and observe what information it
captures from its environment.
.SS Template types
The content of a new note is composed by one of Tp\-Note\[cq]s internal
customizable templates, hence the name Tp\-Note, where \f[I]Tp\f[R]
stands for \[lq]template\[rq].
Which of the internal templates is applied depends on the context in
which Tp\-Note is invoked: e.g.\ the template when creating a new note
file in a given directory is called `\f[CR]tmpl.from_dir_content\f[R]'.
.PP
In total, there are 3 different `\f[CR]tmpl.*_content\f[R]' templates:
.IP \[bu] 2
`\f[CR]tmpl.from_dir_content\f[R]'
.IP \[bu] 2
`\f[CR]tmpl.from_text_file_content\f[R]'
.IP \[bu] 2
`\f[CR]tmpl.annotate_file_content\f[R]'
.PP
In general, the templates are designed in a way, that the text input
stream \- usually originating from the clipboard \- ends up in the body
of the note file, whereas the environment \- such as the username \-
ends up in the header of the note file.
.PP
Once the content of the new note is set by one of the above content
templates, another template type comes into play: the so\-called
\f[I]filename template\f[R].
Each content template has a corresponding filename template, e.g.:
.IP \[bu] 2
`\f[CR]tmpl.from_dir_filename\f[R]'
.IP \[bu] 2
`\f[CR]tmpl.from_text_file_filename\f[R]'
.IP \[bu] 2
`\f[CR]tmpl.annotate_file_filename\f[R]'
.IP \[bu] 2
`\f[CR]tmpl.sync_filename\f[R]' (no corresponding content template)
.PP
As the name suggests, the role of a filename template is to determine
the filename of the new note.
This is done by evaluating (deserializing) it\[cq]s YAML header.
The values of the note\[cq]s YAML header fields are can be accessed in
filename templates through various `\f[CR]{{ fm.fm_<key> }}\f[R]'
dynamically created template variables.
For example the value of the YAML header field `\f[CR]title:\f[R]' can
be accessed with `\f[CR]{{ fm.fm_title }}\f[R]'.
Once the filename is set, Tp\-Note writes out the new note on disk.
.PP
Most of the above templates are dedicated to the creation of new note
files.
However, two of them have a special role: \f[I]prepend header to text
file\f[R] and \f[I]synchronize filename\f[R]:
.IP \[bu] 2
\f[I]Prepend header to text file\f[R]: When Tp\-Note opens a regular
text file without a YAML header, a new header is prepended
automatically.
It\[cq]s data originates mainly form the filename of the text file.
The templates applied in this use case are:
`\f[CR]tmpl.from_text_file_content\f[R]' and
`\f[CR]tmpl.from_text_file_filename\f[R]'.
.IP \[bu] 2
\f[I]Synchronize filename\f[R]: This function mode is invoked when
[Tp\-Note] opens an existing note file, after it\[cq]s YAML header is
evaluated.
The extracted header information is then applied to the
`\f[CR]tmpl.sync_filename\f[R]' template and the resulting filename is
compared to the actual filename on disk.
If they differ, [Tp\-Note] renames the note file.
Note, the `\f[CR]tmpl.sync_filename\f[R]' template operates on its own
without a corresponding content template.
.PP
Note, that in the operation mode \f[I]synchronize filename\f[R], the
header data overwrites the filename of the note, whereas in the
operation mode \f[I]prepend header\f[R] the filename data is copied into
the new prepended header.
Keep in mind, that even in the latter mode the filename might change
slightly.
This is because after the header creation with the
`\f[CR]tmpl.from_text_file_content\f[R]' template, the
`\f[CR]tmpl.from_text_file_filename\f[R]' template is applied, which
might cause a slight filename modification due to its sanitization
filters (cf.\ `\f[CR]sanit()\f[R]' in the section \f[I]Template
filters\f[R]).
.PP
You can disable the \f[I]prepend header\f[R] feature by setting the
configuration file variable `\f[CR]arg_default.add_header = false\f[R]'.
To disable all filename synchronization, set
`\f[CR]arg_default.no_filename_sync = true\f[R]'.
This guarantees, that Tp\-Note will never change neither the filename
nor the YAML header of an existing file.
.PP
For a more detailed description of templates and their defaults, please
consult the `\f[CR]const\f[R]' definitions in Tp\-Note\[cq]s source code
files `\f[CR]config.rs\f[R]' and `\f[CR]note.rs\f[R]' in the directory
`\f[CR]tpnote\-lib/src/\f[R]'.
.SS Template variables
All \c
.UR https://tera.netlify.com/docs/#templates
Tera template variables and functions
.UE \c
\ can be used within Tp\-Note\[cq]s templates.
For example `\f[CR]{{ get_env(name=\[aq]LANG\[aq]) }}\[aq]\f[R] gives
you access to the'\f[CR]LANG\f[R]\[cq] environment variable.
.PP
In addition, Tp\-Note defines the following variables:
.IP \[bu] 2
`\f[CR]{{ path }}\f[R]' is the canonicalized fully qualified path name
corresponding to Tp\-Note\[cq]s positional command line parameter
`\f[CR]<path>\f[R]'.
If none was given on the command line, `\f[CR]{{ path }}\f[R]' contains
the current working directory path.
.IP \[bu] 2
`\f[CR]{{ dir_path }}\f[R]' is identical to `\f[CR]{{ path }}\f[R]' with
one exception: if `\f[CR]{{ path }}\f[R]' points to a file, the last
component (the file name) is omitted and only the directory path is
retained.
If `\f[CR]{{ path }}\f[R]' points to a directory,
`\f[CR]{{ dir_path }}\f[R]' equals `\f[CR]{{ path }}\f[R]'.
.IP \[bu] 2
`\f[CR]{{ doc_fm_text }}\f[R]': is the header as raw text of the file
`\f[CR]{{ path }}\f[R]' points to.
Note, this variable is only available in the templates
`\f[CR]from_text_file_*\f[R]', `\f[CR]sync_filename\f[R]' and the HTML
templates below.
.IP \[bu] 2
`\f[CR]{{ doc.body }}\f[R]': is the content of the file
`\f[CR]{{ path }}\f[R]' points to.
If the file starts with a YAML header, its raw text is stored in
`\f[CR]{{ doc.header }}\f[R]'.
Note, these variables are only available in the templates:
`\f[CR]from_text_file_content\f[R]', `\f[CR]sync_filename\f[R]' and in
the HTML templates `\f[CR]tmpl_html.*\f[R]'.
.IP \[bu] 2
`\f[CR]{{ doc_file_date }}\f[R]': is the file system creation date of
the file `\f[CR]{{ path }}\f[R]' points to.
This variable is only available in the templates
`\f[CR]from_text_file_*\f[R]', `\f[CR]sync_filename\f[R]' and in HTML
templates.
This condition implies, that `\f[CR]{{ path }}\f[R]' points to a file.
Note: on some platforms and with some filesystems, the variable
`\f[CR]{{ doc_file_date }}\f[R]' might not be available.
Here the file modification date is used instead.
.IP \[bu] 2
`\f[CR]{{ txt_clipboard.body }}\f[R]' is the complete
`\f[CR]plain/text\f[R]' clipboard text.
In case the clipboard\[cq]s content starts with a YAML header, only the
non YAML content is retained.
`\f[CR]{{ txt_clipboard.header }}\f[R]' is the YAML header section of
the clipboard data, if it exists.
If not, the variable is empty.
.IP \[bu] 2
`\f[CR]{{ html_clipboard.body }}\f[R]' and
`\f[CR]{{ html_clipboard.header }}\f[R]' contain the same text as their
`\f[CR]txt_clipboard.*\f[R]' counterparts, but as HTML.
The HTML clipboard provides more information, e.g.\ hyperlinks contain a
link destination besides its link text.
In the TXT clipboard you see only link texts.
.IP \[bu] 2
`\f[CR]{{ stdin.body }}\f[R]' is the complete text content originating
from the input stream `\f[CR]stdin\f[R]'.
This stream can replace the clipboard when it is not available.
In case the input stream\[cq]s content starts with a YAML header, the
latter does not appear in this variable.
`\f[CR]{{ stdin.header }}\f[R]' is the YAML section of the input stream,
if one exists.
Otherwise, the variable is still defined, but its value is the empty
string.
.IP \[bu] 2
`\f[CR]{{ extension_default }}\f[R]' is the default extension for new
notes (can be changed in the configuration file),
.IP \[bu] 2
`\f[CR]{{ username }}\f[R]' is the content of the first non\-empty
environment variable: `\f[CR]TPNOTE_USER\f[R]', `\f[CR]LOGNAME\f[R]',
`\f[CR]USER\f[R]' or `\f[CR]USERNAME\f[R]'.
.IP \[bu] 2
`\f[CR]{{ lang }}\f[R]' contains the user\[cq]s language tag as defined
in \c
.UR http://www.rfc-editor.org/rfc/rfc5646.txt
RFC 5646
.UE \c
\&.
Not to be confused with the UNIX `\f[CR]LANG\f[R]' environment variable
from which this value is derived under Linux/macOS.
Under Windows, the user\[cq]s language tag is queried through the
WinAPI.
If defined, the environment variable `\f[CR]TPNOTE_LANG\f[R]' overwrites
the value of `\f[CR]{{ lang }}\f[R]' (all operating systems).
.IP \[bu] 2
`\f[CR]{{ force_lang }}\f[R]' is a copy of the command line option
`\f[CR]\-\-force\-lang\f[R]'.
If `\f[CR]\-\-force\-lang=\-\f[R]' then the value of
`\f[CR]{{ lang }}\f[R]' is copied into `\f[CR]{{ force_lang }}\f[R]'.
This variable is always defined and is empty when the command line
option is not set.
.PP
The following `\f[CR]{{ fm.fm_* }}\f[R]' variables are typically
generated, \f[I]after\f[R] a content template was filled in with data:
For example a field named `\f[CR]title:\f[R]' in the content template
`\f[CR]tmpl.from_dir_content\f[R]' will generate the variable
`\f[CR]fm.fm_title\f[R]' which can then be used in the corresponding
`\f[CR]tmpl.from_dir_filename\f[R]' filename template.
`\f[CR]{{ fm.fm_* }}\f[R]' variables are generated dynamically.
This means, a YAML front\-matter variable `\f[CR]foo:\f[R]' in a note
will generate a `\f[CR]{{ fm.fm_foo }}\f[R]' template variable.
On the other hand, a missing `\f[CR]foo:\f[R]' will cause
`\f[CR]{{ fm.fm_foo }}\f[R]' to be undefined.
Please note, that the header variables may be localized,
e.g.\ `\f[CR]Untertitel:\f[R]'.
Nevertheless, in templates always use the English version, e.g.
`\f[CR]fm.fm_subtitle\f[R]'.
.PP
It is to be observed that `\f[CR]{{ fm.fm_* }}\f[R]' variables are not
available in in the `\f[CR]tmpl.from_text_file_content\f[R]' content
template.
.IP \[bu] 2
`\f[CR]{{ fm.fm_title }}\f[R]' is the `\f[CR]title:\f[R]' as indicated
in the YAML front\-matter of the note.
.IP \[bu] 2
`\f[CR]{{ fm.fm_subtitle }}\f[R]' is the `\f[CR]subtitle:\f[R]' as
indicated in the YAML front matter of the note.
.IP \[bu] 2
`\f[CR]{{ fm.fm_author }}\f[R]' is the `\f[CR]author:\f[R]' as indicated
in the YAML front\-matter of the note.
.IP \[bu] 2
`\f[CR]{{ fm.fm_lang }}\f[R]' is the `\f[CR]lang:\f[R]' as indicated in
the YAML front\-matter of the note.
.IP \[bu] 2
`\f[CR]{{ fm.fm_file_ext }}\f[R]' holds the value of the optional YAML
header variable `\f[CR]file_ext:\f[R]'
(e.g.\ `\f[CR]file_ext: rst\f[R]').
.IP \[bu] 2
`\f[CR]{{ fm.fm_sort_tag }}\f[R]': The sort tag variable as defined in
the YAML front matter of this note
(e.g.\ `\f[CR]sort_tag: \[aq]20200312\[aq]\f[R]').
.IP \[bu] 2
`\f[CR]{{ fm }}\f[R]': is a collection (map) of all defined
`\f[CR]{{ fm.fm_* }}\f[R]' variables.
It is used in the `\f[CR]tmpl.from_dir_content\f[R]' template, typically
in a loop like:
.RS 2
.IP
.EX
{{ fm.fm_title | to_yaml(key=\[aq]fm_title\[aq]) }}
{{ fm.fm_subtitle | to_yaml(key=\[aq]fm_subtitle\[aq]) }}
{{ fm  | remove(key=\[aq]fm_title\[aq]) | remove(key=\[aq]fm_keywords\[aq]) | to_yaml }}
.EE
.RE
.PP
Important: there is no guarantee, that any of the above
`\f[CR]{{ fm.fm_* }}\f[R]' variables are defined!
Depending on the last content template result, certain variables might
be undefined.
Please take into consideration, that a defined variable might contain
the empty string `\f[CR]\[aq]\[aq]\f[R]'.
Creating a new note file with a content template, the note\[cq]s header
is parsed into `\f[CR]{{ fm.fm_* }}\f[R]' variables.
The latter are then type checked according configurable rules.
The rules are defined in `\f[CR]tmpl.filter.assert_precondition\f[R]'
.PP
For a more detailed description of the available template variables,
please consult the `\f[CR]const\f[R]' definitions in Tp\-Note\[cq]s
source code file `\f[CR]note.rs\f[R]'.
.SS Template filters
In addition to \f[I]Tera\f[R]\[cq]s \c
.UR https://tera.netlify.app/docs/#built-in-filters
built\-in filters
.UE \c
, Tp\-Note comes with some additional filters, i.e.:
`\f[CR]append(newline=true)\f[R]', `\f[CR]append(with=...)\f[R]',
`\f[CR]trunc\f[R]', `\f[CR]file_copy_counter\f[R]',
`\f[CR]file_ext\f[R]', `\f[CR]file_name\f[R]',
`\f[CR]file_sort_tag\f[R]', `\f[CR]file_stem\f[R]',
`\f[CR]flatten_array\f[R]', `\f[CR]get_lang\f[R]', `\f[CR]heading\f[R]',
`\f[CR]html_heading\f[R]',
`\f[CR]html_to_markup(extension=..., default=...)\f[R]',
`\f[CR]insert(key=..., value=...)\f[R]', `\f[CR]link_dest\f[R]',
`\f[CR]link_text\f[R]', `\f[CR]link_title\f[R]', `\f[CR]map_lang\f[R]',
`\f[CR]prepend\f[R]', `\f[CR]prepend(newline=true)\f[R]',
`\f[CR]prepend(with=...)\f[R]', `\f[CR]prepend(with_sort_tag=...)\f[R]',
`\f[CR]remove(key=...)\f[R]', `\f[CR]replace_empty(with=...)\f[R]',
`\f[CR]sanit\f[R]', `\f[CR]to_html\f[R]', `\f[CR]to_yaml\f[R]',
`\f[CR]to_yaml(key=...)\f[R]', `\f[CR]to_yaml(tab=...)\f[R]' and
`\f[CR]trim_file_sort_tag\f[R]'.
.PP
A filter is always used together with a variable.
Here are some examples:
.IP \[bu] 2
`\f[CR]{{ path |\ file_name }}\f[R]' returns the final component of
`\f[CR]{{ path }}\f[R]'.
If `\f[CR]{{ path }}\f[R]' points to a file, the filter returns the
complete filename including its sort tag, stem, copy\-counter, dot and
extension.
If the `\f[CR]<path>\f[R]' points to a directory, the filter returns the
final directory name.
.IP \[bu] 2
`\f[CR]{{ path | file_sort_tag }}\f[R]' is the sort tag (numerical
filename prefix) of the final component of `\f[CR]{{ path }}\f[R]',
e.g.\ `\f[CR]01\-23_9\f[R]' or `\f[CR]20191022\f[R]'.
It is similar to `\f[CR]{{ path |\ file_name }}\f[R]' but without
returning its stem, copy\-counter and extension.
.IP \[bu] 2
`\f[CR]{{ path | file_sort_tag | assert_valid_sort_tag }}\f[R]' does not
change the above output, but the filter asserts at runtime, that the
resulting type is either `\f[CR]String\f[R]' or `\f[CR]Number\f[R]' and
that all characters are part of the set
`\f[CR]filename.sort_tag.extra_chars\f[R]'.
The additional runtime check simplifies template debugging.
.IP \[bu] 2
`\f[CR]{{ path |\ file_stem }}\f[R]' is similar to
`\f[CR]{{ path |\ file_name }}\f[R]' but without its sort tag,
copy\-counter and extension.
Only the stem of `\f[CR]{{ path }}\f[R]'\[cq]s last component is
returned.
.IP \[bu] 2
`\f[CR]{{ path |\ file_copy_counter }}\f[R]' is similar to
`\f[CR]{{ path |\ file_name }}\f[R]' but without its sort tag, stem and
extension.
Only the copy counter of `\f[CR]{{ path }}\f[R]'\[cq]s last component is
returned.
.IP \[bu] 2
`\f[CR]{{ path | file_ext }}\f[R]' is `\f[CR]{{ path }}\f[R]'\[cq]s file
extension without dot (period), e.g.\ `\f[CR]txt\f[R]' or
`\f[CR]md\f[R]'.
.IP \[bu] 2
`\f[CR]{{ path | file_ext |\ prepend(with=\[aq].\[aq]) }}\f[R]' is
`\f[CR]{{ path }}\f[R]'\[cq]s file extension with dot (period),
e.g.\ `\f[CR].txt\f[R]' or `\f[CR].md\f[R]'.
.IP \[bu] 2
`\f[CR]{{ path | trim_file_sort_tag }}\f[R]' returns the final component
of `\f[CR]path\f[R]' which might be a directory name or a file name.
Unlike the `\f[CR]file_name\f[R]' filter (which also returns the final
component), `\f[CR]trim_file_sort_tag\f[R]' trims the sort tag if there
is one.
.IP \[bu] 2
`\f[CR]{{ dir_path | find_last_created_file | incr_sort_tag(default=\[dq]\[dq]) }}\f[R]'
searches `\f[CR]dir_path\f[R]' for the most recently created Tp\-Note
file, extracts the sort\-tag from its file name and increments it.
If the incremented sort\-tag (e.g.\ `\f[CR]13\f[R]') exists on disk in
the note\[cq]s directory already, the incrementation is performed by
\[lq]branching\[rq] instead (e.g.\ `\f[CR]12a\f[R]').
If the incrementation fails, for example because the input sort\-tag is
a chronological sort\-tag type or because it is empty, the
`\f[CR]default\f[R]' value is returned.
.IP \[bu] 2
`\f[CR]{{ dir_path | trim_file_sort_tag }}\f[R]' returns the final
component of `\f[CR]dir_path\f[R]' (which is the final directory name in
`\f[CR]{{ path }}\f[R]').
Unlike the `\f[CR]file_name\f[R]' filter (which also returns the final
component), `\f[CR]trim_file_sort_tag\f[R]' trims the sort tag if there
is one.
.IP \[bu] 2
`\f[CR]{{ html_clipboard.body | html_to_markup(extension=e, default=d) }}\f[R]'
converts the clipboard\[cq]s HTML content into the target markup
language specified by `\f[CR]{{ e }}\f[R]', e.g.\ `\f[CR]md\f[R]'.
If the conversion fails or results in an empty string, stream the
content of the variable `\f[CR]{{ d }}\f[R]' instead.
.IP \[bu] 2
`\f[CR]{{ txt_clipboard.body | trunc }}\f[R]' is the first 200 bytes
from the clipboard.
.IP \[bu] 2
`\f[CR]{{ txt_clipboard.body | heading }}\f[R]' is the clipboard\[cq]s
content until the end of the first sentence, or the first newline.
.IP \[bu] 2
`\f[CR]{{ html_clipboard.body | html_heading }}\f[R]' searches in the
HTML clipboard input, for e.g `\f[CR]<h2>HEADING</h2>\f[R]', and returns
the first HTML heading, e.g.\  `\f[CR]HEADING\f[R]'.
.IP \[bu] 2
`\f[CR]{{ html_clipboard.body | link_text }}\f[R]' is the name of the
first Markdown or ReStructuredText formatted link in the clipboard.
.IP \[bu] 2
`\f[CR]{{ html_clipboard.body | link_dest }}\f[R]' is the URL of the
first Markdown or ReStruncturedText formatted link in the clipboard.
.IP \[bu] 2
`\f[CR]{{ html_clipboard.body | link_title }}\f[R]' is the title of the
first Markdown or ReStruncturedText formatted link in the clipboard.
.IP \[bu] 2
`\f[CR]{{ username | capitalize | to_yaml(key=\[aq]author\[aq],tab=12) }}\f[R]'
is the capitalized YAML encoded username.
As all YAML front\-matter is YAML encoded, the `\f[CR]to_yaml\f[R]'
filter must be appended to any template variable placed in the
front\-matter block.
The `\f[CR]key=\[aq]author\[aq]\f[R]' parameter prepends the key to the
capitalized username, e.g.: `\f[CR]autor:      John\f[R]'.
Note, the first letter of `\f[CR]John\f[R]' starts at the tabulator
position `\f[CR]tab=12\f[R]'.
.IP \[bu] 2
`\f[CR]{{ fm.fm_subtitle | sanit }}\f[R]' is the note\[cq]s subtitle as
defined in its front matter, sanitized in a file system friendly form.
Special characters are omitted or replaced by `\f[CR]\-\f[R]' and
`\f[CR]_\f[R]'.
See the section \f[I]Filename template convention\f[R] for more details
about this filter.
.IP \[bu] 2
`\f[CR]{{ fm.fm_title | sanit | prepend(with_sort_tag=path|file_sort_tag) }}\f[R]'
is the note\[cq]s title as defined in its front\-matter.
Same as above, but the title string is prepended with the note\[cq]s
\f[I]sort_tag\f[R] and with a `\f[CR]filename.sort_tag.separator\f[R]'
(by default `\f[CR]\-\f[R]').
Eventually, a second `\f[CR]filename.sort_tag.extra_separator\f[R]' (by
default `\f[CR]\[aq]\[aq]\f[R]') is inserted after the first to
guarantee, that one of the separators unequivocally marks the end of the
\f[I]sort_tag\f[R].
This might be necessary to avoid ambiguity in case the
`\f[CR]fm.fm_title\f[R]' starts with a character defined in the
`\f[CR]filename.sort_tag.extra_chars\f[R]' set.
.IP \[bu] 2
`\f[CR]{{ fm.title | replace_empty(with=\[aq]no title\[aq])\f[R]'
forwards the input unchanged.
In case the input is the empty string, the `\f[CR]with\f[R]' string is
forwarded instead.
.IP \[bu] 2
`\f[CR]{{ fm | remove(key=\[aq]fm_title\[aq]) | remove(key=\[aq]fm_author\[aq]) | to_yaml }}\f[R]'
renders the collection (map) `\f[CR]fm\f[R]', exclusive of the variables
`\f[CR]fm.fm_title\f[R]' and `\f[CR]fm.fm_author\f[R]' to YAML.
Note, that the filter `\f[CR]to_yaml\f[R]' has no parameter
`\f[CR]key\f[R]' in this context.
.IP \[bu] 2
`\f[CR]{{ fm | insert(key=\[aq]fm_author\[aq], value=\[aq]Getreu\[aq]) | to_yaml}}\f[R]'
takes the collection (map) `\f[CR]fm\f[R]', inserts the key/value
`\f[CR]fm_author\f[R]'/`\f[CR]Jens\f[R]' and renders the result into
YAML.
Note, that the filter `\f[CR]to_yaml\f[R]' has no parameter
`\f[CR]key\f[R]' in this context.
.IP \[bu] 2
`\f[CR]{{ fm | to_yaml | append(newline=true) }}\f[R]' renders the
collection (map) `\f[CR]fm\f[R]' into YAML.
If the collection is empty, the result is the empty string.
Otherwise, the YAML rendition is appended with a newline character.
.IP \[bu] 2
`\f[CR]{{ fm | to_html | safe }}\f[R]' renders the collection (map)
`\f[CR]fm.fm_*\f[R]' into HTML.
The `\f[CR]to_html\f[R]' must be followed by a `\f[CR]safe\f[R]' filter
to pass through the HTML formatting of objects and arrays.
.IP \[bu] 2
`\f[CR]{{ doc.body | get_lang }}\f[R]' determines the natural languages
of the text in the variable `\f[CR]{{ doc.body }}\f[R] and returns the
result as an array of ISO 639\-1 language codes.
The template filter'\f[CR]{{ get_lang }}\f[R]\[cq] can be configured
with the configuration file variable `\f[CR]tmpl.filter.get_lang\f[R]'.
The latter defines those ISO 639\-1 codes, the detection algorithm
considers as potential language candidates.
Keep this list as small as possible, because language detection is
computationally expensive.
A long candidate list may slow down the note file creation workflow.
The detected languages are listed as \f[CR]\[aq]Value::Array\f[R]\[cq]
in the order of their statistic frequency.
If the detection algorithm can not detect any of the configured language
candidates, the filter `\f[CR]{{ get_lang }}\f[R]' returns en empty
array.
.IP \[bu] 2
`\f[CR]{{ doc.body | get_lang | map_lang }}\f[R]': The
`\f[CR]map_lang\f[R]' filter extends the detected ISO 638\-1 language
codes to complete IETF BCP 47 language tags, usually containing a region
subtag.
For example the input `\f[CR]en\f[R]' results in `\f[CR]en\-US\f[R]'.
This additional mapping is useful because the detection algorithm can
not determine the region automatically.
The mapping can be configured by adjusting the configuration file
variable `\f[CR]tmpl.filter.map_lang\f[R]'.
If a language is not listed in the `\f[CR]tmpl.filter.map_lang\f[R]'
filter configuration, the input is passed through, e.g.\ `\f[CR]fr\f[R]'
results in `\f[CR]fr\f[R]'.
.IP \[bu] 2
`\f[CR]{{ doc.body | get_lang | map_lang(default=lang) }}\f[R]' adds an
extra mapping to the `\f[CR]map_lang\f[R]' filter: when the input of the
`\f[CR]map_lang\f[R]' filter is an empty \f[CR]Value::Array\f[R], then
`\f[CR]{{ lang }}\f[R]' is added as single item.
`\f[CR]{{ lang }}\f[R]' is expected to be a ISO 638\-1 language code,
e.g.\ `\f[CR]en\f[R]'.
Depending on the `\f[CR]tmpl.filter.map_lang\f[R]' configuration, the
exemplary `\f[CR]en\f[R]' input may be converted to `\f[CR]en\-US\f[R]'
or `\f[CR]en\-GB\f[R]'.
.IP \[bu] 2
`\f[CR]{{ doc.body | get_lang | ... | flatten_array | to_yaml }}\f[R]':
Arrays are usually printed with `\f[CR]to_yaml\f[R]' as item lists.
When a list contains exactly one item, the filter
`\f[CR]flatten_array\f[R]' flattens that list.
This way the single item is printed as such and not as a list with only
one item.
Lists with two or more items are not flattened.
They are passed through without modification.
.IP \[bu] 2
`\f[CR]{{ doc.body | get_lang | ... | first | to_yaml }}\f[R]' returns
the language with the biggest word count frequency as
`\f[CR]Value::String\f[R]'.
.IP \[bu] 2
`\f[CR]{{ doc_file_date | default(value=now()) | date(format=\[aq]%Y%m%d\[aq]) }}\f[R]'
Returns the formatted date of the file `\f[CR]{{ path }}\f[R]' points
to.
Defaults to the current date in cases `\f[CR]{{ doc_file_date }}\f[R]'
is not defined (see \f[I]Template variables\f[R] section).
.SS Content template conventions
Tp\-Note distinguishes two template types: content templates are used to
create the note\[cq]s content (front\-matter and body) and the
corresponding filename templates `\f[CR]tmpl.*_filename\f[R]' are used
to calculate the note\[cq]s filename.
By convention, content templates appear in the configuration file in
variables named `\f[CR]tmpl.*_content\f[R]'.
.PP
Strings in the front matter section of content templates are YAML
encoded.
Therefore, all variables used in the front\-matter must pass an
additional `\f[CR]to_yaml()\f[R]'\-filter.
For example, the variable `\f[CR]{{ dir_path | file_stem() }}\f[R]'
becomes
`\f[CR]{{ dir_path | file_stem() | to_yaml(key=\[aq]title\[aq]) }}\f[R]'
or, shorter:
`\f[CR]{{ dir_path | file_stem | to_yaml(key=\[aq]title\[aq]) }}\f[R]'.
.PP
When given with a key, the `\f[CR]to_yaml(key=\[aq]...\[aq])\f[R]'
filter accepts any input type, whereas the short form
`\f[CR]to_yaml()\f[R]' requires an `\f[CR]Value::Object\f[R]' type as
input.
The latter is often followed be the `\f[CR]append(newline=true)\f[R]'
filter appending a newline.
.SS Filename template conventions
By convention, filename templates appear in the configuration file in
variables named `\f[CR]tmpl.*_filename\f[R]'.
When a content template creates a new note, the corresponding filename
template is called afterwards to calculate the filename of the new note.
Please note that, the filename template `\f[CR]tmpl.sync_filename\f[R]'
has a special role as it synchronizes the filename of existing note
files.
Besides this, as we are dealing with filenames we must guarantee, that
the filename templates produce only file system friendly characters.
For this purpose Tp\-Note provides the additional Tera filter
`\f[CR]sanit\f[R]':
.PP
The `\f[CR]sanit()\f[R]' filter transforms a string in a file system
friendly from.
This is done by replacing forbidden characters like `\f[CR]?\f[R]' and
`\f[CR]\[rs]\[rs]\f[R]' with `\f[CR]_\f[R]' or space.
This filter can be used with any variable, but is most useful with
filename templates.
For example, in the `\f[CR]tmpl.sync_filename\f[R]' template, we find
the expression `\f[CR]{{ subtitle | sanit }}\f[R]'.
Note that the filter recognizes strings that represent a so\-called dot
file name and treats them a little differently by prepending them with
an apostrophe: a dot file is a file whose name starts with
`\f[CR].\f[R]' and that does not contain whitespace.
It may or may not end with a file extension.
The apostrophe preserves the following dot from being filtered.
.PP
The `\f[CR]prepend(with_sort_tag=<...>\f[R]' filter is similar to the
`\f[CR]prepend(with=<...>\f[R]' filter, with two exceptions:
.IP "1." 3
If `\f[CR]filename.sort_tag.separator\f[R]' is defined (by default
`\f[CR]\-\f[R]'), it is automatically inserted between the sort\-tag and
the input string.
.IP "2." 3
In some cases an additional separator
`\f[CR]filename.sort_tag.extra_separator\f[R]' (by default
`\f[CR]\[aq]\f[R]') may be inserted as well.
.PP
Both separators guarantee that the end of a sort\-tag is detected
unequivocally.
For example, when the input string starts with a digit
`\f[CR]0123456789\f[R]' or `\f[CR]\-_\f[R]', the string is prepended
with \f[CR]\-\[aq]\f[R], e.g.
`\f[CR]1\-The Show Begins\f[R]' becomes
`\f[CR]\[aq]1\-The Show Begins\f[R]'.
The `\f[CR]prepend(with_sort_tag=<...>)\f[R]' filter must be applied to
the first variable, e.g.\ 
`\f[CR]{{ fm.fm_title | sanit | prepend(with_separator=path|file_sort_tag )}\f[R]'.
This way, it is always possible to univocally distinguish the sort\-tag
from the rest of the filename.
Note, the default sort\-tag separators can be changed with the
configuration variables `\f[CR]filename.sort_tag.separator\f[R]' and
`\f[CR]filename.sort_tag.extra_separator\f[R]'.
For more details please consult the \f[I]Customize the filename
synchronization scheme\f[R] chapter.
.PP
In filename templates most variables must pass the `\f[CR]sanit\f[R]'
filter.
Exception to this rule are sort\-tag expressions like
`\f[CR]{{ path | file_sort_tag }}\f[R]' and
`\f[CR]{{ dir_path | file_sort_tag }}\f[R]'.
As the latter are guaranteed to contain only the file system friendly
characters `\f[CR]0123456789 \-_\f[R]', no additional filtering is
required.
Please note, that in this case a `\f[CR]sanit\f[R]'\-filter would
needlessly restrict the value range of sort\-tags because they may
contain characters, which the `\f[CR]sanit\f[R]'\-filter screens out
when they appear in leading or trailing position.
For this reason one must not use the `\f[CR]sanit\f[R]'\-filter together
with `\f[CR]{{ path | file_sort_tag }}\f[R]' or
`\f[CR]{{ dir_path |file_sort_tag }}\f[R]'.
.SH SECURITY AND PRIVACY CONSIDERATIONS
As discussed above, Tp\-Note\[cq]s built\-in viewer sets up an HTTP
server on the `\f[CR]localhost\f[R]' interface with a random port
number.
.PP
For security reasons, Tp\-Note limits the set of files the viewer is
able to publish.
To summarize, a file is only served:
.IP "1." 3
When it is referenced in one of the currently viewed Tp\-Note files,
.IP "2." 3
when its file extension is registered with the
`\f[CR]viewer.served_mime_type\f[R]' list,
.IP "3." 3
if the number of so far viewed Tp\-Note files,
`\f[CR]viewer.displayed_tpnote_count_max\f[R]' is not exceeded,
.IP "4." 3
when it\[cq]s located under a directory containing a marker file named
`\f[CR]tpnote.toml\f[R]' (without marker file this condition is void).
.PP
The HTTP server runs as long as the launched web browser window is open.
Note, that the server not only exposes the displayed note file, but also
all referenced inline images and other linked TP\-Note files.
Internally, the viewer maintains a list of \f[I]referenced local
URLs\f[R].
For security reasons, only listed files are served.
To limit data exfiltration in case an attacker gains access to an
account on your machine, the number of served Tp\-Note files is limited
by the configurable value
`\f[CR]viewer.displayed_tpnote_count_max\f[R]'.
.PP
In addition to the above quantitative restriction, Tp\-Note\[cq]s
built\-in viewer serves only files whose file extensions are registered
with the `\f[CR]viewer.served_mime_type\f[R]' configuration file
variable.
The latter allows disabling the \f[I]follow links to other Tp\-Note
files\f[R] feature by removing all `\f[CR]text/*\f[R]' mime types from
that list.
.PP
Another security feature is the `\f[CR]tpnote.toml\f[R]' marker file.
When Tp\-Note opens a note file, it checks all directories above, one by
one, until it finds the marker file `\f[CR]tpnote.toml\f[R]'.
Tp\-Note\[cq]s viewer will never serve a file located outside the root
directory and its children.
When no `\f[CR]tpnote.toml\f[R]' file is found, the root directory is
set to `\f[CR]/\f[R]', which disables this security feature.
.PP
As Tp\-Note\[cq]s built\-in viewer binds to the `\f[CR]localhost\f[R]'
interface, the exposed files are in principle accessible to all
processes running on the computer.
As long as only one user is logged into the computer at a given time, no
privacy concern is raised: any potential attacker must be logged in, in
order to access the \f[CR]localhost\f[R] HTTP server.
.PP
This is why on systems where multiple users are logged in at the same
time, it is recommended to disable Tp\-Note\[cq]s internal HTTP server
by setting the configuration file variable
`\f[CR]arg_default.edit = true\f[R]'.
Alternatively, you can also compile Tp\-Note without the
`\f[CR]viewer\f[R]' feature.
Note, that even if the viewer feature disabled, the
`\f[CR]\-\-export\f[R]' command line option still works: This allows the
authorized user to render the note to HTML manually.
.PP
\f[B]Summary\f[R]: As long as Tp\-Note\[cq]s built\-in note viewer is
running, the note file and all its referenced (image) files are exposed
to all users logged into the computer at that given time.
This concerns only local users, Tp\-Note never exposes any information
to the network or on the Internet.
.SH ENVIRONMENT VARIABLES
LANG
.RS
.PP
Tp\-Note stores the user\[cq]s locale settings \- originating from the
environment variable `\f[CR]LANG\f[R]' (or the Windows registry) \- in
the template variable `\f[CR]{{ lang }}\f[R]'.
When the environment variable `\f[CR]TPNOTE_LANG\f[R]' is set, it
overwrites the locale setting stored in `\f[CR]{{ lang }}\f[R]'.
`\f[CR]man locale\f[R]' describes the data format of `\f[CR]LANG\f[R]',
a typical value is `\f[CR]en_GB.UTF\-8\f[R]'.
.RE
.PP
TPNOTE_CONFIG
.RS
.PP
When set, the environment variable replaces the default path where
Tp\-Note loads or stores its configuration file.
It has the same effect as the command line option
`\f[CR]\-\-config\f[R]'.
If both are present, that latter takes precedence.
.RE
.PP
TPNOTE_LANG
.RS
.PP
Tp\-Note stores the user\[cq]s locale settings \- originating from the
environment variable `\f[CR]LANG\f[R]' (or the Windows registry) \- in
the template variable `\f[CR]{{ lang }}\f[R]'.
When the environment variable `\f[CR]TPNOTE_LANG\f[R]' is set, it
overwrites the locale setting stored in `\f[CR]{{ lang }}\f[R]'.
Unlike `\f[CR]LANG\f[R]', the environment variable
`\f[CR]TPNOTE_LANG\f[R]' is encoded as IETF BCP 47 language tag,
e.g.\ `\f[CR]en\-US\f[R]'.
.RE
.PP
TPNOTE_LANG_DETECTION
.RS
.PP
If set, this variable overwrites the configuration file variables
`\f[CR]tmpl.filter.get_lang\f[R]' and `\f[CR]tmpl.filter.map_lang\f[R]',
thus selecting potential language candidates for Tp\-Note\[cq]s natural
language detection.
The string contains a comma and space separated list of ISO 63901 codes,
e.g.
`\f[CR]fr\f[R]' or IETF BCP 47 tags, e.g.\ `\f[CR]fr\-FR\f[R]'.
Here is an example of a complete string:
`\f[CR]de\-DE, en, fr\-FR, hu\f[R]'.
The user\[cq]s default locale `\f[CR]{{ lang }}\f[R]' is automatically
added to the list.
Note, that the language detection algorithm determines only the language
subtag, e.g.\ `\f[CR]en\f[R]'.
The region subtag will be added as indicated in your configuration.
Subsequent entries that differ only in the region subtag,
e.g.\ `\f[CR]en\-GB, en\-US\f[R]' are ignored.
.RE
.RS
.PP
The empty string disables the automatic language detection.
.RE
.RS
.IP
.EX
TPNOTE_LANG_DETECTION=\[dq]\[dq] tpnote
.EE
.RE
.RS
.PP
For debugging observe the value of `\f[CR]SETTINGS\f[R]' in the debug
log:
.RE
.RS
.IP
.EX
TPNOTE_LANG_DETECTION=\[dq]de\-DE, en, fr\-FR\[dq] tpnote \-d trace \-b
.EE
.RE
.PP
TPNOTE_BROWSER
.RS
.PP
If set, this variable take precedence over the configuration file
variable `\f[CR]app_args.browser\f[R]'.
While the latter is a list describing how to invoke various web
browsers, `\f[CR]TPNOTE_BROWSER\f[R]' contains a string invoking one
particular browser, exactly as one would do in a shell: the whitespace
separated tokens list contains: the path name of the application, and
all its flags and options.
For example:
.RE
.RS
.IP
.EX
TPNOTE_BROWSER=\[dq]chromium \-\-new\-window \-\-incognito\[dq] tpnote
.EE
.RE
.RS
.PP
The above instructs Tp\-Note to start the web browser
`\f[CR]chromium\f[R]' with the flags `\f[CR]\-\-new\-window\f[R]' and
`\f[CR]\-\-incognito\f[R]'.
Unlike in a shell, the backslash and quote characters have no special
meaning.
Instead, all tokens are \f[I]percent encoded\f[R],
e.g.\ `\f[CR]my path\f[R]' becomes `\f[CR]my%20path\f[R]'.
.RE
.RS
.PP
The empty string disables the launch of the browser the same way as
`\f[CR]\-\-edit\f[R]':
.RE
.RS
.IP
.EX
TPNOTE_BROWSER=\[dq]\[dq] tpnote
.EE
.RE
.RS
.PP
is equivalent to:
.RE
.RS
.IP
.EX
tpnote \-\-edit
.EE
.RE
.PP
TPNOTE_EDITOR
.RS
.PP
If set, and you are working on a graphical desktop, this variable takes
precedence over the configuration file variable
`\f[CR]app_args.editor\f[R]'.
While the latter is a list describing how to invoke various file
editors, `\f[CR]TPNOTE_EDITOR\f[R]' contains a string invoking one
particular file editor, exactly as one would do on a shell: the
whitespace separated tokens list contains: the path name of the
application, and all its flags and options.
For example:
.RE
.RS
.IP
.EX
TPNOTE_EDITOR=\[dq]geany \-sim\[dq] tpnote
.EE
.RE
.RS
.PP
The above instructs Tp\-Note to start the editor `\f[CR]geany\f[R]' with
the flags `\f[CR]\-sim\f[R]'.
Unlike with shell tokens, the backslash and quote characters have no
special meaning.
Instead, all tokens are \f[I]percent encoded\f[R].
Consider the following example where the space character is expressed as
`\f[CR]%20\f[R]':
.RE
.RS
.IP
.EX
TPNOTE_EDITOR=\[dq]geany \-sim \-c \[ti]/my%20config/\[dq] tpnote
.EE
.RE
.RS
.PP
The empty string disables the launch of the editor the same way as the
command line option `\f[CR]\-\-view\f[R]' does:
.RE
.RS
.IP
.EX
TPNOTE_EDITOR=\[dq]\[dq] tpnote
.EE
.RE
.RS
.PP
is equivalent to:
.RE
.RS
.IP
.EX
tpnote \-\-view
.EE
.RE
.PP
TPNOTE_EDITOR_CONSOLE
.RS
.PP
If set, and you are working on a virtual console, this variable takes
precedence over the configuration file variable
`\f[CR]app_args.editor_console\f[R]', which defines the command line
parameters for invoking a terminal based text editor, such as Emacs, Vim
or Helix.
Otherwise, the syntax and the operation are the same as with
`\f[CR]TPNOTE_EDITOR\f[R] hereinabove'.
For example:
.RE
.RS
.IP
.EX
sudo TPNOTE_EDITOR_CONSOLE=\[dq]nvim\[dq] tpnote
.EE
.RE
.PP
TPNOTE_EXTENSION_DEFAULT
.RS
.PP
If set, this variable takes precedence over the configuration file
variable `\f[CR]filename.extension_default\f[R]', which defines the file
extension of new note files.
In order to activate the appropriate markup renderer make sure, that the
value given here is listed in `\f[CR]filename.extensions\f[R]'.
.PP
For example, to create a new reStructuredText note file type:
.RE
.RS
.IP
.EX
TPNOTE_EXTENSION_DEFAULT=rst\[dq] tpnote
.EE
.RE
.RS
.PP
Common values are: `\f[CR]md\f[R]' (default, Markdown), `\f[CR]txt\f[R]'
(Markdown), `\f[CR]rst\f[R]' (reStructuredText) and `\f[CR]txtnote\f[R]'
(text with hyperlinks).
.RE
.PP
TPNOTE_SCHEME
.RS
.PP
If set, this variable takes precedence over the configuration file
variable `\f[CR]arg_default.scheme\f[R]', which defines the scheme used
when creating new note file.
.RE
.PP
TPNOTE_USER, LOGNAME, USER, USERNAME
.RS
.PP
The template variable `\f[CR]{{ username }}\f[R]' is the content of the
first non\-empty environment variable: `\f[CR]TPNOTE_USER\f[R]',
`\f[CR]LOGNAME\f[R]', `\f[CR]USER\f[R]' or `\f[CR]USERNAME\f[R]'.
.RE
.SH EXIT STATUS
The exit status is `\f[CR]0\f[R]' when the note file was processed
without error or `\f[CR]1\f[R]' otherwise.
If Tp\-Note can not read or write its configuration file, the exit
status is `\f[CR]5\f[R]'.
.PP
When `\f[CR]tpnote \-n \-b <FILE>\f[R]' returns the code `\f[CR]0\f[R]',
the note file has a valid YAML header with a `\f[CR]title:\f[R]' field.
In addition, when `\f[CR]tpnote \-n \-b \-x \- <FILE>\f[R]' returns the
code `\f[CR]0\f[R]', the note\[cq]s body was rendered without error.
.SH RESOURCES
Tp\-Note it hosted on:
.IP \[bu] 2
Gitlab: \c
.UR https://gitlab.com/getreu/tp-note
.UE \c
\&.
.IP \[bu] 2
Github (mirror): \c
.UR https://github.com/getreu/tp-note
.UE \c
\ and on
.SH COPYING
Copyright © 2016\-2025 Jens Getreu
.PP
Licensed under either of
.IP \[bu] 2
Apache Licence, Version 2.0 \c
.UR http://www.apache.org/licenses/LICENSE-2.0
.UE \c
.IP \[bu] 2
MIT licence \c
.UR http://opensource.org/licenses/MIT
.UE \c
.PP
at your option.
.SS Contribution
By contributing to this project, you agree to transfer the copyright
ownership of your contribution to Jens Getreu.
.SH AUTHORS
Jens Getreu \c
.MT getreu@web.de
.ME \c
.SH NOTES
.SS [1]
.PP
The variables `\f[CR]{{ fm.fm_title }}\f[R]' and
`\f[CR]{{ fm.fm_subtitle }}\f[R]' reflect the values in the note\[cq]s
front matter.
.SH AUTHORS
Jens Getreu.
